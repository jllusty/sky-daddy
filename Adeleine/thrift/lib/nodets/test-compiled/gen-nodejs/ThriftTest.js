//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./ThriftTest_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftTest_testVoid_args = function(args) {
};
ThriftTest_testVoid_args.prototype = {};
ThriftTest_testVoid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testVoid_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testVoid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testVoid_result = function(args) {
};
ThriftTest_testVoid_result.prototype = {};
ThriftTest_testVoid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testVoid_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testVoid_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testString_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testString_args.prototype = {};
ThriftTest_testString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thing = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testString_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testString_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.STRING, 1);
    output.writeString(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testString_result.prototype = {};
ThriftTest_testString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testString_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testBool_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testBool_args.prototype = {};
ThriftTest_testBool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.thing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testBool_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testBool_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.BOOL, 1);
    output.writeBool(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testBool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testBool_result.prototype = {};
ThriftTest_testBool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testBool_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testBool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testByte_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testByte_args.prototype = {};
ThriftTest_testByte_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.thing = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testByte_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testByte_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.BYTE, 1);
    output.writeByte(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testByte_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testByte_result.prototype = {};
ThriftTest_testByte_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testByte_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testByte_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testI32_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testI32_args.prototype = {};
ThriftTest_testI32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testI32_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testI32_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.I32, 1);
    output.writeI32(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testI32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testI32_result.prototype = {};
ThriftTest_testI32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testI32_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testI32_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testI64_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testI64_args.prototype = {};
ThriftTest_testI64_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.thing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testI64_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testI64_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.I64, 1);
    output.writeI64(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testI64_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testI64_result.prototype = {};
ThriftTest_testI64_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testI64_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testI64_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testDouble_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testDouble_args.prototype = {};
ThriftTest_testDouble_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.thing = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testDouble_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testDouble_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testDouble_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testDouble_result.prototype = {};
ThriftTest_testDouble_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testDouble_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testDouble_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testBinary_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testBinary_args.prototype = {};
ThriftTest_testBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thing = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testBinary_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testBinary_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.STRING, 1);
    output.writeBinary(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testBinary_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testBinary_result.prototype = {};
ThriftTest_testBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testBinary_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testBinary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testStruct_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = new ttypes.Xtruct(args.thing);
    }
  }
};
ThriftTest_testStruct_args.prototype = {};
ThriftTest_testStruct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.thing = new ttypes.Xtruct();
        this.thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testStruct_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testStruct_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.STRUCT, 1);
    this.thing.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testStruct_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Xtruct(args.success);
    }
  }
};
ThriftTest_testStruct_result.prototype = {};
ThriftTest_testStruct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Xtruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testStruct_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testStruct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testNest_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = new ttypes.Xtruct2(args.thing);
    }
  }
};
ThriftTest_testNest_args.prototype = {};
ThriftTest_testNest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.thing = new ttypes.Xtruct2();
        this.thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testNest_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testNest_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.STRUCT, 1);
    this.thing.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testNest_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Xtruct2(args.success);
    }
  }
};
ThriftTest_testNest_result.prototype = {};
ThriftTest_testNest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Xtruct2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testNest_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testNest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMap_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = Thrift.copyMap(args.thing, [null]);
    }
  }
};
ThriftTest_testMap_args.prototype = {};
ThriftTest_testMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.thing = {};
        var _rtmp3211 = input.readMapBegin();
        var _size210 = _rtmp3211.size || 0;
        for (var _i212 = 0; _i212 < _size210; ++_i212) {
          var key213 = null;
          var val214 = null;
          key213 = input.readI32();
          val214 = input.readI32();
          this.thing[key213] = val214;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMap_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMap_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.thing));
    for (var kiter215 in this.thing) {
      if (this.thing.hasOwnProperty(kiter215)) {
        var viter216 = this.thing[kiter215];
        output.writeI32(kiter215);
        output.writeI32(viter216);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ThriftTest_testMap_result.prototype = {};
ThriftTest_testMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3218 = input.readMapBegin();
        var _size217 = _rtmp3218.size || 0;
        for (var _i219 = 0; _i219 < _size217; ++_i219) {
          var key220 = null;
          var val221 = null;
          key220 = input.readI32();
          val221 = input.readI32();
          this.success[key220] = val221;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMap_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter222 in this.success) {
      if (this.success.hasOwnProperty(kiter222)) {
        var viter223 = this.success[kiter222];
        output.writeI32(kiter222);
        output.writeI32(viter223);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testStringMap_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = Thrift.copyMap(args.thing, [null]);
    }
  }
};
ThriftTest_testStringMap_args.prototype = {};
ThriftTest_testStringMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.thing = {};
        var _rtmp3225 = input.readMapBegin();
        var _size224 = _rtmp3225.size || 0;
        for (var _i226 = 0; _i226 < _size224; ++_i226) {
          var key227 = null;
          var val228 = null;
          key227 = input.readString();
          val228 = input.readString();
          this.thing[key227] = val228;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testStringMap_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testStringMap_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.thing));
    for (var kiter229 in this.thing) {
      if (this.thing.hasOwnProperty(kiter229)) {
        var viter230 = this.thing[kiter229];
        output.writeString(kiter229);
        output.writeString(viter230);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testStringMap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ThriftTest_testStringMap_result.prototype = {};
ThriftTest_testStringMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3232 = input.readMapBegin();
        var _size231 = _rtmp3232.size || 0;
        for (var _i233 = 0; _i233 < _size231; ++_i233) {
          var key234 = null;
          var val235 = null;
          key234 = input.readString();
          val235 = input.readString();
          this.success[key234] = val235;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testStringMap_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testStringMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter236 in this.success) {
      if (this.success.hasOwnProperty(kiter236)) {
        var viter237 = this.success[kiter236];
        output.writeString(kiter236);
        output.writeString(viter237);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testSet_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = Thrift.copyList(args.thing, [null]);
    }
  }
};
ThriftTest_testSet_args.prototype = {};
ThriftTest_testSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.thing = [];
        var _rtmp3239 = input.readSetBegin();
        var _size238 = _rtmp3239.size || 0;
        for (var _i240 = 0; _i240 < _size238; ++_i240) {
          var elem241 = null;
          elem241 = input.readI32();
          this.thing.push(elem241);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testSet_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testSet_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.thing.length);
    for (var iter242 in this.thing) {
      if (this.thing.hasOwnProperty(iter242)) {
        iter242 = this.thing[iter242];
        output.writeI32(iter242);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ThriftTest_testSet_result.prototype = {};
ThriftTest_testSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.SET) {
        this.success = [];
        var _rtmp3244 = input.readSetBegin();
        var _size243 = _rtmp3244.size || 0;
        for (var _i245 = 0; _i245 < _size243; ++_i245) {
          var elem246 = null;
          elem246 = input.readI32();
          this.success.push(elem246);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testSet_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.I32, this.success.length);
    for (var iter247 in this.success) {
      if (this.success.hasOwnProperty(iter247)) {
        iter247 = this.success[iter247];
        output.writeI32(iter247);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testList_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = Thrift.copyList(args.thing, [null]);
    }
  }
};
ThriftTest_testList_args.prototype = {};
ThriftTest_testList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.thing = [];
        var _rtmp3249 = input.readListBegin();
        var _size248 = _rtmp3249.size || 0;
        for (var _i250 = 0; _i250 < _size248; ++_i250) {
          var elem251 = null;
          elem251 = input.readI32();
          this.thing.push(elem251);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testList_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testList_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.thing.length);
    for (var iter252 in this.thing) {
      if (this.thing.hasOwnProperty(iter252)) {
        iter252 = this.thing[iter252];
        output.writeI32(iter252);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ThriftTest_testList_result.prototype = {};
ThriftTest_testList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3254 = input.readListBegin();
        var _size253 = _rtmp3254.size || 0;
        for (var _i255 = 0; _i255 < _size253; ++_i255) {
          var elem256 = null;
          elem256 = input.readI32();
          this.success.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testList_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter257 in this.success) {
      if (this.success.hasOwnProperty(iter257)) {
        iter257 = this.success[iter257];
        output.writeI32(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testEnum_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testEnum_args.prototype = {};
ThriftTest_testEnum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testEnum_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testEnum_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.I32, 1);
    output.writeI32(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testEnum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testEnum_result.prototype = {};
ThriftTest_testEnum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testEnum_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testEnum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testTypedef_args = function(args) {
  this.thing = null;
  if (args) {
    if (args.thing !== undefined && args.thing !== null) {
      this.thing = args.thing;
    }
  }
};
ThriftTest_testTypedef_args.prototype = {};
ThriftTest_testTypedef_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.thing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testTypedef_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testTypedef_args');
  if (this.thing !== null && this.thing !== undefined) {
    output.writeFieldBegin('thing', Thrift.Type.I64, 1);
    output.writeI64(this.thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testTypedef_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest_testTypedef_result.prototype = {};
ThriftTest_testTypedef_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testTypedef_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testTypedef_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMapMap_args = function(args) {
  this.hello = null;
  if (args) {
    if (args.hello !== undefined && args.hello !== null) {
      this.hello = args.hello;
    }
  }
};
ThriftTest_testMapMap_args.prototype = {};
ThriftTest_testMapMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.hello = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMapMap_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMapMap_args');
  if (this.hello !== null && this.hello !== undefined) {
    output.writeFieldBegin('hello', Thrift.Type.I32, 1);
    output.writeI32(this.hello);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMapMap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyMap, null]);
    }
  }
};
ThriftTest_testMapMap_result.prototype = {};
ThriftTest_testMapMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3259 = input.readMapBegin();
        var _size258 = _rtmp3259.size || 0;
        for (var _i260 = 0; _i260 < _size258; ++_i260) {
          var key261 = null;
          var val262 = null;
          key261 = input.readI32();
          val262 = {};
          var _rtmp3264 = input.readMapBegin();
          var _size263 = _rtmp3264.size || 0;
          for (var _i265 = 0; _i265 < _size263; ++_i265) {
            var key266 = null;
            var val267 = null;
            key266 = input.readI32();
            val267 = input.readI32();
            val262[key266] = val267;
          }
          input.readMapEnd();
          this.success[key261] = val262;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMapMap_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMapMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter268 in this.success) {
      if (this.success.hasOwnProperty(kiter268)) {
        var viter269 = this.success[kiter268];
        output.writeI32(kiter268);
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(viter269));
        for (var kiter270 in viter269) {
          if (viter269.hasOwnProperty(kiter270)) {
            var viter271 = viter269[kiter270];
            output.writeI32(kiter270);
            output.writeI32(viter271);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testInsanity_args = function(args) {
  this.argument = null;
  if (args) {
    if (args.argument !== undefined && args.argument !== null) {
      this.argument = new ttypes.Insanity(args.argument);
    }
  }
};
ThriftTest_testInsanity_args.prototype = {};
ThriftTest_testInsanity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument = new ttypes.Insanity();
        this.argument.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testInsanity_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testInsanity_args');
  if (this.argument !== null && this.argument !== undefined) {
    output.writeFieldBegin('argument', Thrift.Type.STRUCT, 1);
    this.argument.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testInsanity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyMap, ttypes.Insanity]);
    }
  }
};
ThriftTest_testInsanity_result.prototype = {};
ThriftTest_testInsanity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3273 = input.readMapBegin();
        var _size272 = _rtmp3273.size || 0;
        for (var _i274 = 0; _i274 < _size272; ++_i274) {
          var key275 = null;
          var val276 = null;
          key275 = input.readI64();
          val276 = {};
          var _rtmp3278 = input.readMapBegin();
          var _size277 = _rtmp3278.size || 0;
          for (var _i279 = 0; _i279 < _size277; ++_i279) {
            var key280 = null;
            var val281 = null;
            key280 = input.readI32();
            val281 = new ttypes.Insanity();
            val281.read(input);
            val276[key280] = val281;
          }
          input.readMapEnd();
          this.success[key275] = val276;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testInsanity_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testInsanity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter282 in this.success) {
      if (this.success.hasOwnProperty(kiter282)) {
        var viter283 = this.success[kiter282];
        output.writeI64(kiter282);
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(viter283));
        for (var kiter284 in viter283) {
          if (viter283.hasOwnProperty(kiter284)) {
            var viter285 = viter283[kiter284];
            output.writeI32(kiter284);
            viter285.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMulti_args = function(args) {
  this.arg0 = null;
  this.arg1 = null;
  this.arg2 = null;
  this.arg3 = null;
  this.arg4 = null;
  this.arg5 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
    if (args.arg1 !== undefined && args.arg1 !== null) {
      this.arg1 = args.arg1;
    }
    if (args.arg2 !== undefined && args.arg2 !== null) {
      this.arg2 = args.arg2;
    }
    if (args.arg3 !== undefined && args.arg3 !== null) {
      this.arg3 = Thrift.copyMap(args.arg3, [null]);
    }
    if (args.arg4 !== undefined && args.arg4 !== null) {
      this.arg4 = args.arg4;
    }
    if (args.arg5 !== undefined && args.arg5 !== null) {
      this.arg5 = args.arg5;
    }
  }
};
ThriftTest_testMulti_args.prototype = {};
ThriftTest_testMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.arg0 = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.arg1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.arg2 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.arg3 = {};
        var _rtmp3287 = input.readMapBegin();
        var _size286 = _rtmp3287.size || 0;
        for (var _i288 = 0; _i288 < _size286; ++_i288) {
          var key289 = null;
          var val290 = null;
          key289 = input.readI16();
          val290 = input.readString();
          this.arg3[key289] = val290;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.arg4 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.arg5 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMulti_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMulti_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.BYTE, 1);
    output.writeByte(this.arg0);
    output.writeFieldEnd();
  }
  if (this.arg1 !== null && this.arg1 !== undefined) {
    output.writeFieldBegin('arg1', Thrift.Type.I32, 2);
    output.writeI32(this.arg1);
    output.writeFieldEnd();
  }
  if (this.arg2 !== null && this.arg2 !== undefined) {
    output.writeFieldBegin('arg2', Thrift.Type.I64, 3);
    output.writeI64(this.arg2);
    output.writeFieldEnd();
  }
  if (this.arg3 !== null && this.arg3 !== undefined) {
    output.writeFieldBegin('arg3', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRING, Thrift.objectLength(this.arg3));
    for (var kiter291 in this.arg3) {
      if (this.arg3.hasOwnProperty(kiter291)) {
        var viter292 = this.arg3[kiter291];
        output.writeI16(kiter291);
        output.writeString(viter292);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.arg4 !== null && this.arg4 !== undefined) {
    output.writeFieldBegin('arg4', Thrift.Type.I32, 5);
    output.writeI32(this.arg4);
    output.writeFieldEnd();
  }
  if (this.arg5 !== null && this.arg5 !== undefined) {
    output.writeFieldBegin('arg5', Thrift.Type.I64, 6);
    output.writeI64(this.arg5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMulti_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Xtruct(args.success);
    }
  }
};
ThriftTest_testMulti_result.prototype = {};
ThriftTest_testMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Xtruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMulti_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testException_args = function(args) {
  this.arg = null;
  if (args) {
    if (args.arg !== undefined && args.arg !== null) {
      this.arg = args.arg;
    }
  }
};
ThriftTest_testException_args.prototype = {};
ThriftTest_testException_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.arg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testException_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testException_args');
  if (this.arg !== null && this.arg !== undefined) {
    output.writeFieldBegin('arg', Thrift.Type.STRING, 1);
    output.writeString(this.arg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testException_result = function(args) {
  this.err1 = null;
  if (args instanceof ttypes.Xception) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
  }
};
ThriftTest_testException_result.prototype = {};
ThriftTest_testException_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new ttypes.Xception();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testException_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testException_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMultiException_args = function(args) {
  this.arg0 = null;
  this.arg1 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
    if (args.arg1 !== undefined && args.arg1 !== null) {
      this.arg1 = args.arg1;
    }
  }
};
ThriftTest_testMultiException_args.prototype = {};
ThriftTest_testMultiException_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.arg0 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.arg1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMultiException_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMultiException_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRING, 1);
    output.writeString(this.arg0);
    output.writeFieldEnd();
  }
  if (this.arg1 !== null && this.arg1 !== undefined) {
    output.writeFieldBegin('arg1', Thrift.Type.STRING, 2);
    output.writeString(this.arg1);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testMultiException_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof ttypes.Xception) {
    this.err1 = args;
    return;
  }
  if (args instanceof ttypes.Xception2) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Xtruct(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
ThriftTest_testMultiException_result.prototype = {};
ThriftTest_testMultiException_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Xtruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new ttypes.Xception();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new ttypes.Xception2();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testMultiException_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testMultiException_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testOneway_args = function(args) {
  this.secondsToSleep = null;
  if (args) {
    if (args.secondsToSleep !== undefined && args.secondsToSleep !== null) {
      this.secondsToSleep = args.secondsToSleep;
    }
  }
};
ThriftTest_testOneway_args.prototype = {};
ThriftTest_testOneway_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.secondsToSleep = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testOneway_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testOneway_args');
  if (this.secondsToSleep !== null && this.secondsToSleep !== undefined) {
    output.writeFieldBegin('secondsToSleep', Thrift.Type.I32, 1);
    output.writeI32(this.secondsToSleep);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTest_testOneway_result = function(args) {
};
ThriftTest_testOneway_result.prototype = {};
ThriftTest_testOneway_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest_testOneway_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_testOneway_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftTestClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
ThriftTestClient.prototype = {};
ThriftTestClient.prototype.seqid = function() { return this._seqid; };
ThriftTestClient.prototype.new_seqid = function() { return this._seqid += 1; };

ThriftTestClient.prototype.testVoid = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testVoid();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testVoid();
  }
};

ThriftTestClient.prototype.send_testVoid = function() {
  var output = new this.pClass(this.output);
  var args = new ThriftTest_testVoid_args();
  try {
    output.writeMessageBegin('testVoid', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testVoid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testVoid_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ThriftTestClient.prototype.testString = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testString(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testString(thing);
  }
};

ThriftTestClient.prototype.send_testString = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testString_args(params);
  try {
    output.writeMessageBegin('testString', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testString = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testString_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testString failed: unknown result');
};

ThriftTestClient.prototype.testBool = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testBool(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testBool(thing);
  }
};

ThriftTestClient.prototype.send_testBool = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testBool_args(params);
  try {
    output.writeMessageBegin('testBool', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testBool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testBool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testBool failed: unknown result');
};

ThriftTestClient.prototype.testByte = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testByte(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testByte(thing);
  }
};

ThriftTestClient.prototype.send_testByte = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testByte_args(params);
  try {
    output.writeMessageBegin('testByte', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testByte = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testByte_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testByte failed: unknown result');
};

ThriftTestClient.prototype.testI32 = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testI32(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testI32(thing);
  }
};

ThriftTestClient.prototype.send_testI32 = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testI32_args(params);
  try {
    output.writeMessageBegin('testI32', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testI32 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testI32_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testI32 failed: unknown result');
};

ThriftTestClient.prototype.testI64 = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testI64(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testI64(thing);
  }
};

ThriftTestClient.prototype.send_testI64 = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testI64_args(params);
  try {
    output.writeMessageBegin('testI64', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testI64 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testI64_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testI64 failed: unknown result');
};

ThriftTestClient.prototype.testDouble = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testDouble(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testDouble(thing);
  }
};

ThriftTestClient.prototype.send_testDouble = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testDouble_args(params);
  try {
    output.writeMessageBegin('testDouble', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testDouble = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testDouble_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testDouble failed: unknown result');
};

ThriftTestClient.prototype.testBinary = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testBinary(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testBinary(thing);
  }
};

ThriftTestClient.prototype.send_testBinary = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testBinary_args(params);
  try {
    output.writeMessageBegin('testBinary', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testBinary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testBinary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testBinary failed: unknown result');
};

ThriftTestClient.prototype.testStruct = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testStruct(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testStruct(thing);
  }
};

ThriftTestClient.prototype.send_testStruct = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testStruct_args(params);
  try {
    output.writeMessageBegin('testStruct', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testStruct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testStruct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testStruct failed: unknown result');
};

ThriftTestClient.prototype.testNest = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testNest(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testNest(thing);
  }
};

ThriftTestClient.prototype.send_testNest = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testNest_args(params);
  try {
    output.writeMessageBegin('testNest', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testNest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testNest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testNest failed: unknown result');
};

ThriftTestClient.prototype.testMap = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testMap(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testMap(thing);
  }
};

ThriftTestClient.prototype.send_testMap = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testMap_args(params);
  try {
    output.writeMessageBegin('testMap', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testMap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testMap failed: unknown result');
};

ThriftTestClient.prototype.testStringMap = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testStringMap(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testStringMap(thing);
  }
};

ThriftTestClient.prototype.send_testStringMap = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testStringMap_args(params);
  try {
    output.writeMessageBegin('testStringMap', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testStringMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testStringMap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testStringMap failed: unknown result');
};

ThriftTestClient.prototype.testSet = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testSet(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testSet(thing);
  }
};

ThriftTestClient.prototype.send_testSet = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testSet_args(params);
  try {
    output.writeMessageBegin('testSet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testSet failed: unknown result');
};

ThriftTestClient.prototype.testList = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testList(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testList(thing);
  }
};

ThriftTestClient.prototype.send_testList = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testList_args(params);
  try {
    output.writeMessageBegin('testList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testList failed: unknown result');
};

ThriftTestClient.prototype.testEnum = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testEnum(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testEnum(thing);
  }
};

ThriftTestClient.prototype.send_testEnum = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testEnum_args(params);
  try {
    output.writeMessageBegin('testEnum', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testEnum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testEnum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testEnum failed: unknown result');
};

ThriftTestClient.prototype.testTypedef = function(thing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testTypedef(thing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testTypedef(thing);
  }
};

ThriftTestClient.prototype.send_testTypedef = function(thing) {
  var output = new this.pClass(this.output);
  var params = {
    thing: thing
  };
  var args = new ThriftTest_testTypedef_args(params);
  try {
    output.writeMessageBegin('testTypedef', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testTypedef = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testTypedef_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testTypedef failed: unknown result');
};

ThriftTestClient.prototype.testMapMap = function(hello, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testMapMap(hello);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testMapMap(hello);
  }
};

ThriftTestClient.prototype.send_testMapMap = function(hello) {
  var output = new this.pClass(this.output);
  var params = {
    hello: hello
  };
  var args = new ThriftTest_testMapMap_args(params);
  try {
    output.writeMessageBegin('testMapMap', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testMapMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testMapMap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testMapMap failed: unknown result');
};

ThriftTestClient.prototype.testInsanity = function(argument, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testInsanity(argument);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testInsanity(argument);
  }
};

ThriftTestClient.prototype.send_testInsanity = function(argument) {
  var output = new this.pClass(this.output);
  var params = {
    argument: argument
  };
  var args = new ThriftTest_testInsanity_args(params);
  try {
    output.writeMessageBegin('testInsanity', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testInsanity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testInsanity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testInsanity failed: unknown result');
};

ThriftTestClient.prototype.testMulti = function(arg0, arg1, arg2, arg3, arg4, arg5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testMulti(arg0, arg1, arg2, arg3, arg4, arg5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testMulti(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

ThriftTestClient.prototype.send_testMulti = function(arg0, arg1, arg2, arg3, arg4, arg5) {
  var output = new this.pClass(this.output);
  var params = {
    arg0: arg0,
    arg1: arg1,
    arg2: arg2,
    arg3: arg3,
    arg4: arg4,
    arg5: arg5
  };
  var args = new ThriftTest_testMulti_args(params);
  try {
    output.writeMessageBegin('testMulti', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testMulti failed: unknown result');
};

ThriftTestClient.prototype.testException = function(arg, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testException(arg);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testException(arg);
  }
};

ThriftTestClient.prototype.send_testException = function(arg) {
  var output = new this.pClass(this.output);
  var params = {
    arg: arg
  };
  var args = new ThriftTest_testException_args(params);
  try {
    output.writeMessageBegin('testException', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testException = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testException_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err1) {
    return callback(result.err1);
  }
  callback(null);
};

ThriftTestClient.prototype.testMultiException = function(arg0, arg1, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testMultiException(arg0, arg1);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testMultiException(arg0, arg1);
  }
};

ThriftTestClient.prototype.send_testMultiException = function(arg0, arg1) {
  var output = new this.pClass(this.output);
  var params = {
    arg0: arg0,
    arg1: arg1
  };
  var args = new ThriftTest_testMultiException_args(params);
  try {
    output.writeMessageBegin('testMultiException', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ThriftTestClient.prototype.recv_testMultiException = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest_testMultiException_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err1) {
    return callback(result.err1);
  }
  if (null !== result.err2) {
    return callback(result.err2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testMultiException failed: unknown result');
};

ThriftTestClient.prototype.testOneway = function(secondsToSleep, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testOneway(secondsToSleep);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testOneway(secondsToSleep);
  }
};

ThriftTestClient.prototype.send_testOneway = function(secondsToSleep) {
  var output = new this.pClass(this.output);
  var params = {
    secondsToSleep: secondsToSleep
  };
  var args = new ThriftTest_testOneway_args(params);
  try {
    output.writeMessageBegin('testOneway', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var ThriftTestProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
ThriftTestProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ThriftTestProcessor.prototype.process_testVoid = function(seqid, input, output) {
  var args = new ThriftTest_testVoid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testVoid.length === 0) {
    Q.fcall(this._handler.testVoid.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ThriftTest_testVoid_result({success: result});
      output.writeMessageBegin("testVoid", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testVoid", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testVoid(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testVoid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testVoid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testVoid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testString = function(seqid, input, output) {
  var args = new ThriftTest_testString_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testString.length === 1) {
    Q.fcall(this._handler.testString.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testString_result({success: result});
      output.writeMessageBegin("testString", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testString", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testString(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testString_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testString", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testString", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testBool = function(seqid, input, output) {
  var args = new ThriftTest_testBool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testBool.length === 1) {
    Q.fcall(this._handler.testBool.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testBool_result({success: result});
      output.writeMessageBegin("testBool", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testBool", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testBool(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testBool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testBool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testBool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testByte = function(seqid, input, output) {
  var args = new ThriftTest_testByte_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testByte.length === 1) {
    Q.fcall(this._handler.testByte.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testByte_result({success: result});
      output.writeMessageBegin("testByte", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testByte", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testByte(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testByte_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testByte", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testByte", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testI32 = function(seqid, input, output) {
  var args = new ThriftTest_testI32_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testI32.length === 1) {
    Q.fcall(this._handler.testI32.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testI32_result({success: result});
      output.writeMessageBegin("testI32", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testI32", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testI32(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testI32_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testI32", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testI32", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testI64 = function(seqid, input, output) {
  var args = new ThriftTest_testI64_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testI64.length === 1) {
    Q.fcall(this._handler.testI64.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testI64_result({success: result});
      output.writeMessageBegin("testI64", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testI64", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testI64(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testI64_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testI64", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testI64", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testDouble = function(seqid, input, output) {
  var args = new ThriftTest_testDouble_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testDouble.length === 1) {
    Q.fcall(this._handler.testDouble.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testDouble_result({success: result});
      output.writeMessageBegin("testDouble", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testDouble", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testDouble(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testDouble_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testDouble", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testDouble", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testBinary = function(seqid, input, output) {
  var args = new ThriftTest_testBinary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testBinary.length === 1) {
    Q.fcall(this._handler.testBinary.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testBinary_result({success: result});
      output.writeMessageBegin("testBinary", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testBinary", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testBinary(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testBinary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testBinary", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testBinary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testStruct = function(seqid, input, output) {
  var args = new ThriftTest_testStruct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testStruct.length === 1) {
    Q.fcall(this._handler.testStruct.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testStruct_result({success: result});
      output.writeMessageBegin("testStruct", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testStruct", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testStruct(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testStruct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testStruct", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testStruct", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testNest = function(seqid, input, output) {
  var args = new ThriftTest_testNest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testNest.length === 1) {
    Q.fcall(this._handler.testNest.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testNest_result({success: result});
      output.writeMessageBegin("testNest", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testNest", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testNest(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testNest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testNest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testNest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testMap = function(seqid, input, output) {
  var args = new ThriftTest_testMap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testMap.length === 1) {
    Q.fcall(this._handler.testMap.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testMap_result({success: result});
      output.writeMessageBegin("testMap", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testMap", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testMap(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testMap_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testMap", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testMap", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testStringMap = function(seqid, input, output) {
  var args = new ThriftTest_testStringMap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testStringMap.length === 1) {
    Q.fcall(this._handler.testStringMap.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testStringMap_result({success: result});
      output.writeMessageBegin("testStringMap", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testStringMap", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testStringMap(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testStringMap_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testStringMap", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testStringMap", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testSet = function(seqid, input, output) {
  var args = new ThriftTest_testSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testSet.length === 1) {
    Q.fcall(this._handler.testSet.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testSet_result({success: result});
      output.writeMessageBegin("testSet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testSet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testSet(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testList = function(seqid, input, output) {
  var args = new ThriftTest_testList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testList.length === 1) {
    Q.fcall(this._handler.testList.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testList_result({success: result});
      output.writeMessageBegin("testList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testList", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testList(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testEnum = function(seqid, input, output) {
  var args = new ThriftTest_testEnum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testEnum.length === 1) {
    Q.fcall(this._handler.testEnum.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testEnum_result({success: result});
      output.writeMessageBegin("testEnum", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testEnum", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testEnum(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testEnum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testEnum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testEnum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testTypedef = function(seqid, input, output) {
  var args = new ThriftTest_testTypedef_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testTypedef.length === 1) {
    Q.fcall(this._handler.testTypedef.bind(this._handler),
      args.thing
    ).then(function(result) {
      var result_obj = new ThriftTest_testTypedef_result({success: result});
      output.writeMessageBegin("testTypedef", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testTypedef", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testTypedef(args.thing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testTypedef_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testTypedef", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testTypedef", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testMapMap = function(seqid, input, output) {
  var args = new ThriftTest_testMapMap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testMapMap.length === 1) {
    Q.fcall(this._handler.testMapMap.bind(this._handler),
      args.hello
    ).then(function(result) {
      var result_obj = new ThriftTest_testMapMap_result({success: result});
      output.writeMessageBegin("testMapMap", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testMapMap", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testMapMap(args.hello, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testMapMap_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testMapMap", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testMapMap", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testInsanity = function(seqid, input, output) {
  var args = new ThriftTest_testInsanity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testInsanity.length === 1) {
    Q.fcall(this._handler.testInsanity.bind(this._handler),
      args.argument
    ).then(function(result) {
      var result_obj = new ThriftTest_testInsanity_result({success: result});
      output.writeMessageBegin("testInsanity", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testInsanity", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testInsanity(args.argument, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testInsanity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testInsanity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testInsanity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testMulti = function(seqid, input, output) {
  var args = new ThriftTest_testMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testMulti.length === 6) {
    Q.fcall(this._handler.testMulti.bind(this._handler),
      args.arg0,
      args.arg1,
      args.arg2,
      args.arg3,
      args.arg4,
      args.arg5
    ).then(function(result) {
      var result_obj = new ThriftTest_testMulti_result({success: result});
      output.writeMessageBegin("testMulti", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("testMulti", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testMulti(args.arg0, args.arg1, args.arg2, args.arg3, args.arg4, args.arg5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftTest_testMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testException = function(seqid, input, output) {
  var args = new ThriftTest_testException_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testException.length === 1) {
    Q.fcall(this._handler.testException.bind(this._handler),
      args.arg
    ).then(function(result) {
      var result_obj = new ThriftTest_testException_result({success: result});
      output.writeMessageBegin("testException", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.Xception) {
        result = new ThriftTest_testException_result(err);
        output.writeMessageBegin("testException", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testException(args.arg, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Xception) {
        result_obj = new ThriftTest_testException_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testException", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testMultiException = function(seqid, input, output) {
  var args = new ThriftTest_testMultiException_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testMultiException.length === 2) {
    Q.fcall(this._handler.testMultiException.bind(this._handler),
      args.arg0,
      args.arg1
    ).then(function(result) {
      var result_obj = new ThriftTest_testMultiException_result({success: result});
      output.writeMessageBegin("testMultiException", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.Xception || err instanceof ttypes.Xception2) {
        result = new ThriftTest_testMultiException_result(err);
        output.writeMessageBegin("testMultiException", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testMultiException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.testMultiException(args.arg0, args.arg1, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Xception || err instanceof ttypes.Xception2) {
        result_obj = new ThriftTest_testMultiException_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("testMultiException", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testMultiException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftTestProcessor.prototype.process_testOneway = function(seqid, input, output) {
  var args = new ThriftTest_testOneway_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.testOneway(args.secondsToSleep);
};
