//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./ThriftTest_types');
import Numberz = ttypes.Numberz
import myNumberz = ttypes.myNumberz
import Xception = ttypes.Xception
import Xception2 = ttypes.Xception2
import Bonk = ttypes.Bonk
import Bools = ttypes.Bools
import Xtruct = ttypes.Xtruct
import Xtruct2 = ttypes.Xtruct2
import Xtruct3 = ttypes.Xtruct3
import Insanity = ttypes.Insanity
import CrazyNesting = ttypes.CrazyNesting
import SomeUnion = ttypes.SomeUnion
import EmptyStruct = ttypes.EmptyStruct
import OneField = ttypes.OneField
import VersioningTestV1 = ttypes.VersioningTestV1
import VersioningTestV2 = ttypes.VersioningTestV2
import ListTypeVersioningV1 = ttypes.ListTypeVersioningV1
import ListTypeVersioningV2 = ttypes.ListTypeVersioningV2
import GuessProtocolStruct = ttypes.GuessProtocolStruct
import LargeDeltas = ttypes.LargeDeltas
import NestedListsI32x2 = ttypes.NestedListsI32x2
import NestedListsI32x3 = ttypes.NestedListsI32x3
import NestedMixedx2 = ttypes.NestedMixedx2
import ListBonks = ttypes.ListBonks
import NestedListsBonk = ttypes.NestedListsBonk
import BoolTest = ttypes.BoolTest
import StructA = ttypes.StructA
import StructB = ttypes.StructB
import OptionalSetDefaultTest = ttypes.OptionalSetDefaultTest
import OptionalBinary = ttypes.OptionalBinary

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Prints "testVoid()" and returns nothing.
   */
  testVoid(): void;

  /**
   * Prints "testVoid()" and returns nothing.
   */
  testVoid(callback?: (error: void, response: void)=>void): void;

  /**
   * Prints 'testString("%s")' with thing as '%s'
   * @param string thing - the string to print
   * @return string - returns the string 'thing'
   */
  testString(thing: string): string;

  /**
   * Prints 'testString("%s")' with thing as '%s'
   * @param string thing - the string to print
   * @return string - returns the string 'thing'
   */
  testString(thing: string, callback?: (error: void, response: string)=>void): void;

  /**
   * Prints 'testBool("%s")' where '%s' with thing as 'true' or 'false'
   * @param bool  thing - the bool data to print
   * @return bool  - returns the bool 'thing'
   */
  testBool(thing: boolean): boolean;

  /**
   * Prints 'testBool("%s")' where '%s' with thing as 'true' or 'false'
   * @param bool  thing - the bool data to print
   * @return bool  - returns the bool 'thing'
   */
  testBool(thing: boolean, callback?: (error: void, response: boolean)=>void): void;

  /**
   * Prints 'testByte("%d")' with thing as '%d'
   * The types i8 and byte are synonyms, use of i8 is encouraged, byte still exists for the sake of compatibility.
   * @param byte thing - the i8/byte to print
   * @return i8 - returns the i8/byte 'thing'
   */
  testByte(thing: any): any;

  /**
   * Prints 'testByte("%d")' with thing as '%d'
   * The types i8 and byte are synonyms, use of i8 is encouraged, byte still exists for the sake of compatibility.
   * @param byte thing - the i8/byte to print
   * @return i8 - returns the i8/byte 'thing'
   */
  testByte(thing: any, callback?: (error: void, response: any)=>void): void;

  /**
   * Prints 'testI32("%d")' with thing as '%d'
   * @param i32 thing - the i32 to print
   * @return i32 - returns the i32 'thing'
   */
  testI32(thing: number): number;

  /**
   * Prints 'testI32("%d")' with thing as '%d'
   * @param i32 thing - the i32 to print
   * @return i32 - returns the i32 'thing'
   */
  testI32(thing: number, callback?: (error: void, response: number)=>void): void;

  /**
   * Prints 'testI64("%d")' with thing as '%d'
   * @param i64 thing - the i64 to print
   * @return i64 - returns the i64 'thing'
   */
  testI64(thing: Int64): Int64;

  /**
   * Prints 'testI64("%d")' with thing as '%d'
   * @param i64 thing - the i64 to print
   * @return i64 - returns the i64 'thing'
   */
  testI64(thing: Int64, callback?: (error: void, response: Int64)=>void): void;

  /**
   * Prints 'testDouble("%f")' with thing as '%f'
   * @param double thing - the double to print
   * @return double - returns the double 'thing'
   */
  testDouble(thing: number): number;

  /**
   * Prints 'testDouble("%f")' with thing as '%f'
   * @param double thing - the double to print
   * @return double - returns the double 'thing'
   */
  testDouble(thing: number, callback?: (error: void, response: number)=>void): void;

  /**
   * Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
   * @param binary  thing - the binary data to print
   * @return binary  - returns the binary 'thing'
   */
  testBinary(thing: Buffer): Buffer;

  /**
   * Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
   * @param binary  thing - the binary data to print
   * @return binary  - returns the binary 'thing'
   */
  testBinary(thing: Buffer, callback?: (error: void, response: Buffer)=>void): void;

  /**
   * Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
   * @param Xtruct thing - the Xtruct to print
   * @return Xtruct - returns the Xtruct 'thing'
   */
  testStruct(thing: Xtruct): Xtruct;

  /**
   * Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
   * @param Xtruct thing - the Xtruct to print
   * @return Xtruct - returns the Xtruct 'thing'
   */
  testStruct(thing: Xtruct, callback?: (error: void, response: Xtruct)=>void): void;

  /**
   * Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
   * @param Xtruct2 thing - the Xtruct2 to print
   * @return Xtruct2 - returns the Xtruct2 'thing'
   */
  testNest(thing: Xtruct2): Xtruct2;

  /**
   * Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
   * @param Xtruct2 thing - the Xtruct2 to print
   * @return Xtruct2 - returns the Xtruct2 'thing'
   */
  testNest(thing: Xtruct2, callback?: (error: void, response: Xtruct2)=>void): void;

  /**
   * Prints 'testMap("{%s")' where thing has been formatted into a string of 'key => value' pairs
   *  separated by commas and new lines
   * @param map<i32,i32> thing - the map<i32,i32> to print
   * @return map<i32,i32> - returns the map<i32,i32> 'thing'
   */
  testMap(thing: { [k: number]: number; }): { [k: number]: number; };

  /**
   * Prints 'testMap("{%s")' where thing has been formatted into a string of 'key => value' pairs
   *  separated by commas and new lines
   * @param map<i32,i32> thing - the map<i32,i32> to print
   * @return map<i32,i32> - returns the map<i32,i32> 'thing'
   */
  testMap(thing: { [k: number]: number; }, callback?: (error: void, response: { [k: number]: number; })=>void): void;

  /**
   * Prints 'testStringMap("{%s}")' where thing has been formatted into a string of 'key => value' pairs
   *  separated by commas and new lines
   * @param map<string,string> thing - the map<string,string> to print
   * @return map<string,string> - returns the map<string,string> 'thing'
   */
  testStringMap(thing: { [k: string]: string; }): { [k: string]: string; };

  /**
   * Prints 'testStringMap("{%s}")' where thing has been formatted into a string of 'key => value' pairs
   *  separated by commas and new lines
   * @param map<string,string> thing - the map<string,string> to print
   * @return map<string,string> - returns the map<string,string> 'thing'
   */
  testStringMap(thing: { [k: string]: string; }, callback?: (error: void, response: { [k: string]: string; })=>void): void;

  /**
   * Prints 'testSet("{%s}")' where thing has been formatted into a string of values
   *  separated by commas and new lines
   * @param set<i32> thing - the set<i32> to print
   * @return set<i32> - returns the set<i32> 'thing'
   */
  testSet(thing: number[]): number[];

  /**
   * Prints 'testSet("{%s}")' where thing has been formatted into a string of values
   *  separated by commas and new lines
   * @param set<i32> thing - the set<i32> to print
   * @return set<i32> - returns the set<i32> 'thing'
   */
  testSet(thing: number[], callback?: (error: void, response: number[])=>void): void;

  /**
   * Prints 'testList("{%s}")' where thing has been formatted into a string of values
   *  separated by commas and new lines
   * @param list<i32> thing - the list<i32> to print
   * @return list<i32> - returns the list<i32> 'thing'
   */
  testList(thing: number[]): number[];

  /**
   * Prints 'testList("{%s}")' where thing has been formatted into a string of values
   *  separated by commas and new lines
   * @param list<i32> thing - the list<i32> to print
   * @return list<i32> - returns the list<i32> 'thing'
   */
  testList(thing: number[], callback?: (error: void, response: number[])=>void): void;

  /**
   * Prints 'testEnum("%d")' where thing has been formatted into its numeric value
   * @param Numberz thing - the Numberz to print
   * @return Numberz - returns the Numberz 'thing'
   */
  testEnum(thing: Numberz): Numberz;

  /**
   * Prints 'testEnum("%d")' where thing has been formatted into its numeric value
   * @param Numberz thing - the Numberz to print
   * @return Numberz - returns the Numberz 'thing'
   */
  testEnum(thing: Numberz, callback?: (error: void, response: Numberz)=>void): void;

  /**
   * Prints 'testTypedef("%d")' with thing as '%d'
   * @param UserId thing - the UserId to print
   * @return UserId - returns the UserId 'thing'
   */
  testTypedef(thing: Int64): Int64;

  /**
   * Prints 'testTypedef("%d")' with thing as '%d'
   * @param UserId thing - the UserId to print
   * @return UserId - returns the UserId 'thing'
   */
  testTypedef(thing: Int64, callback?: (error: void, response: Int64)=>void): void;

  /**
   * Prints 'testMapMap("%d")' with hello as '%d'
   * @param i32 hello - the i32 to print
   * @return map<i32,map<i32,i32>> - returns a dictionary with these values:
   *   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
   */
  testMapMap(hello: number): { [k: number]: { [k: number]: number; }; };

  /**
   * Prints 'testMapMap("%d")' with hello as '%d'
   * @param i32 hello - the i32 to print
   * @return map<i32,map<i32,i32>> - returns a dictionary with these values:
   *   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
   */
  testMapMap(hello: number, callback?: (error: void, response: { [k: number]: { [k: number]: number; }; })=>void): void;

  /**
   * So you think you've got this all worked out, eh?
   * 
   * Creates a map with these values and prints it out:
   *   { 1 => { 2 => argument,
   *            3 => argument,
   *          },
   *     2 => { 6 => <empty Insanity struct>, },
   *   }
   * @return map<UserId, map<Numberz,Insanity>> - a map with the above values
   */
  testInsanity(argument: Insanity): any;

  /**
   * So you think you've got this all worked out, eh?
   * 
   * Creates a map with these values and prints it out:
   *   { 1 => { 2 => argument,
   *            3 => argument,
   *          },
   *     2 => { 6 => <empty Insanity struct>, },
   *   }
   * @return map<UserId, map<Numberz,Insanity>> - a map with the above values
   */
  testInsanity(argument: Insanity, callback?: (error: void, response: any)=>void): void;

  /**
   * Prints 'testMulti()'
   * @param i8 arg0 -
   * @param i32 arg1 -
   * @param i64 arg2 -
   * @param map<i16, string> arg3 -
   * @param Numberz arg4 -
   * @param UserId arg5 -
   * @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
   *    and i64_thing = arg2
   */
  testMulti(arg0: any, arg1: number, arg2: Int64, arg3: { [k: number]: string; }, arg4: Numberz, arg5: Int64): Xtruct;

  /**
   * Prints 'testMulti()'
   * @param i8 arg0 -
   * @param i32 arg1 -
   * @param i64 arg2 -
   * @param map<i16, string> arg3 -
   * @param Numberz arg4 -
   * @param UserId arg5 -
   * @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
   *    and i64_thing = arg2
   */
  testMulti(arg0: any, arg1: number, arg2: Int64, arg3: { [k: number]: string; }, arg4: Numberz, arg5: Int64, callback?: (error: void, response: Xtruct)=>void): void;

  /**
   * Print 'testException(%s)' with arg as '%s'
   * @param string arg - a string indication what type of exception to throw
   * if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
   * else if arg == "TException" throw TException
   * else do not throw anything
   */
  testException(arg: string): void;

  /**
   * Print 'testException(%s)' with arg as '%s'
   * @param string arg - a string indication what type of exception to throw
   * if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
   * else if arg == "TException" throw TException
   * else do not throw anything
   */
  testException(arg: string, callback?: (error: ttypes.Xception, response: void)=>void): void;

  /**
   * Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
   * @param string arg - a string indicating what type of exception to throw
   * if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
   * else if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and struct_thing.string_thing = "This is an Xception2"
   * else do not throw anything
   * @return Xtruct - an Xtruct with string_thing = arg1
   */
  testMultiException(arg0: string, arg1: string): Xtruct;

  /**
   * Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
   * @param string arg - a string indicating what type of exception to throw
   * if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
   * else if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and struct_thing.string_thing = "This is an Xception2"
   * else do not throw anything
   * @return Xtruct - an Xtruct with string_thing = arg1
   */
  testMultiException(arg0: string, arg1: string, callback?: (error: ttypes.Xception | ttypes.Xception2, response: Xtruct)=>void): void;

  /**
   * Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
   * sleep 'secondsToSleep'
   * Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
   * @param i32 secondsToSleep - the number of seconds to sleep
   */
  testOneway(secondsToSleep: number): void;

  /**
   * Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
   * sleep 'secondsToSleep'
   * Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
   * @param i32 secondsToSleep - the number of seconds to sleep
   */
  testOneway(secondsToSleep: number, callback?: (error: void, response: void)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testVoid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testString(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testBool(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testByte(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testI32(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testI64(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testDouble(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testBinary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testStruct(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testNest(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testMap(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testStringMap(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testSet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testEnum(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testTypedef(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testMapMap(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testInsanity(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testMulti(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testMultiException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_testOneway(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
