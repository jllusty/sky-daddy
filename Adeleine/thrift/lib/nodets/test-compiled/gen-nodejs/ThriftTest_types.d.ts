//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


/**
 * Docstring!
 */
declare enum Numberz {
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FIVE = 5,
  SIX = 6,
  EIGHT = 8,
}

declare class Bonk {
  public message: string;
  public type: number;

    constructor(args?: { message: string; type: number; });
}

declare class Bools {
  public im_true: boolean;
  public im_false: boolean;

    constructor(args?: { im_true: boolean; im_false: boolean; });
}

declare class Xtruct {
  public string_thing: string;
  public byte_thing: any;
  public i32_thing: number;
  public i64_thing: Int64;

    constructor(args?: { string_thing: string; byte_thing: any; i32_thing: number; i64_thing: Int64; });
}

declare class Xtruct2 {
  public byte_thing: any;
  public struct_thing: Xtruct;
  public i32_thing: number;

    constructor(args?: { byte_thing: any; struct_thing: Xtruct; i32_thing: number; });
}

declare class Xtruct3 {
  public string_thing: string;
  public changed: number;
  public i32_thing: number;
  public i64_thing: Int64;

    constructor(args?: { string_thing: string; changed: number; i32_thing: number; i64_thing: Int64; });
}

declare class Insanity {
  public userMap: { [k: number /*Numberz*/]: Int64; };
  public xtructs: Xtruct[];

    constructor(args?: { userMap: { [k: number /*Numberz*/]: Int64; }; xtructs: Xtruct[]; });
}

declare class CrazyNesting {
  public string_field: string;
  public set_field?: Insanity[];
  public list_field: any[];
  public binary_field: Buffer;

    constructor(args?: { string_field: string; set_field?: Insanity[]; list_field: any[]; binary_field: Buffer; });
}

declare class SomeUnion {
  public map_thing?: { [k: number /*Numberz*/]: Int64; };
  public string_thing?: string;
  public i32_thing?: number;
  public xtruct_thing?: Xtruct3;
  public insanity_thing?: Insanity;

    constructor(args?: { map_thing?: { [k: number /*Numberz*/]: Int64; }; string_thing?: string; i32_thing?: number; xtruct_thing?: Xtruct3; insanity_thing?: Insanity; });
}

declare class Xception extends Thrift.TException {
  public errorCode: number;
  public message: string;

    constructor(args?: { errorCode: number; message: string; });
}

declare class Xception2 extends Thrift.TException {
  public errorCode: number;
  public struct_thing: Xtruct;

    constructor(args?: { errorCode: number; struct_thing: Xtruct; });
}

declare class EmptyStruct {
}

declare class OneField {
  public field: EmptyStruct;

    constructor(args?: { field: EmptyStruct; });
}

declare class VersioningTestV1 {
  public begin_in_both: number;
  public old_string: string;
  public end_in_both: number;

    constructor(args?: { begin_in_both: number; old_string: string; end_in_both: number; });
}

declare class VersioningTestV2 {
  public begin_in_both: number;
  public newint: number;
  public newbyte: any;
  public newshort: number;
  public newlong: Int64;
  public newdouble: number;
  public newstruct: Bonk;
  public newlist: number[];
  public newset: number[];
  public newmap: { [k: number]: number; };
  public newstring: string;
  public end_in_both: number;

    constructor(args?: { begin_in_both: number; newint: number; newbyte: any; newshort: number; newlong: Int64; newdouble: number; newstruct: Bonk; newlist: number[]; newset: number[]; newmap: { [k: number]: number; }; newstring: string; end_in_both: number; });
}

declare class ListTypeVersioningV1 {
  public myints: number[];
  public hello: string;

    constructor(args?: { myints: number[]; hello: string; });
}

declare class ListTypeVersioningV2 {
  public strings: string[];
  public hello: string;

    constructor(args?: { strings: string[]; hello: string; });
}

declare class GuessProtocolStruct {
  public map_field: { [k: string]: string; };

    constructor(args?: { map_field: { [k: string]: string; }; });
}

declare class LargeDeltas {
  public b1: Bools;
  public b10: Bools;
  public b100: Bools;
  public check_true: boolean;
  public b1000: Bools;
  public check_false: boolean;
  public vertwo2000: VersioningTestV2;
  public a_set2500: string[];
  public vertwo3000: VersioningTestV2;
  public big_numbers: number[];

    constructor(args?: { b1: Bools; b10: Bools; b100: Bools; check_true: boolean; b1000: Bools; check_false: boolean; vertwo2000: VersioningTestV2; a_set2500: string[]; vertwo3000: VersioningTestV2; big_numbers: number[]; });
}

declare class NestedListsI32x2 {
  public integerlist: number[][];

    constructor(args?: { integerlist: number[][]; });
}

declare class NestedListsI32x3 {
  public integerlist: number[][][];

    constructor(args?: { integerlist: number[][][]; });
}

declare class NestedMixedx2 {
  public int_set_list: number[][];
  public map_int_strset: { [k: number]: string[]; };
  public map_int_strset_list: { [k: number]: string[]; }[];

    constructor(args?: { int_set_list: number[][]; map_int_strset: { [k: number]: string[]; }; map_int_strset_list: { [k: number]: string[]; }[]; });
}

declare class ListBonks {
  public bonk: Bonk[];

    constructor(args?: { bonk: Bonk[]; });
}

declare class NestedListsBonk {
  public bonk: Bonk[][][];

    constructor(args?: { bonk: Bonk[][][]; });
}

declare class BoolTest {
  public b?: boolean;
  public s?: string;

    constructor(args?: { b?: boolean; s?: string; });
}

declare class StructA {
  public s: string;

    constructor(args?: { s: string; });
}

declare class StructB {
  public aa?: StructA;
  public ab: StructA;

    constructor(args?: { aa?: StructA; ab: StructA; });
}

declare class OptionalSetDefaultTest {
  public with_default?: string[];

    constructor(args?: { with_default?: string[]; });
}

declare class OptionalBinary {
  public bin_set?: Buffer[];
  public bin_map?: any;

    constructor(args?: { bin_set?: Buffer[]; bin_map?: any; });
}

declare var myNumberz: Numberz;
