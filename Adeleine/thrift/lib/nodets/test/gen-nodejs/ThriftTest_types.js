//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.Numberz = {
  '1' : 'ONE',
  'ONE' : 1,
  '2' : 'TWO',
  'TWO' : 2,
  '3' : 'THREE',
  'THREE' : 3,
  '5' : 'FIVE',
  'FIVE' : 5,
  '6' : 'SIX',
  'SIX' : 6,
  '8' : 'EIGHT',
  'EIGHT' : 8
};
var Bonk = module.exports.Bonk = function(args) {
  this.message = null;
  this.type = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Bonk.prototype = {};
Bonk.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bonk.prototype.write = function(output) {
  output.writeStructBegin('Bonk');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Bools = module.exports.Bools = function(args) {
  this.im_true = null;
  this.im_false = null;
  if (args) {
    if (args.im_true !== undefined && args.im_true !== null) {
      this.im_true = args.im_true;
    }
    if (args.im_false !== undefined && args.im_false !== null) {
      this.im_false = args.im_false;
    }
  }
};
Bools.prototype = {};
Bools.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.im_true = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.im_false = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bools.prototype.write = function(output) {
  output.writeStructBegin('Bools');
  if (this.im_true !== null && this.im_true !== undefined) {
    output.writeFieldBegin('im_true', Thrift.Type.BOOL, 1);
    output.writeBool(this.im_true);
    output.writeFieldEnd();
  }
  if (this.im_false !== null && this.im_false !== undefined) {
    output.writeFieldBegin('im_false', Thrift.Type.BOOL, 2);
    output.writeBool(this.im_false);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Xtruct = module.exports.Xtruct = function(args) {
  this.string_thing = null;
  this.byte_thing = null;
  this.i32_thing = null;
  this.i64_thing = null;
  if (args) {
    if (args.string_thing !== undefined && args.string_thing !== null) {
      this.string_thing = args.string_thing;
    }
    if (args.byte_thing !== undefined && args.byte_thing !== null) {
      this.byte_thing = args.byte_thing;
    }
    if (args.i32_thing !== undefined && args.i32_thing !== null) {
      this.i32_thing = args.i32_thing;
    }
    if (args.i64_thing !== undefined && args.i64_thing !== null) {
      this.i64_thing = args.i64_thing;
    }
  }
};
Xtruct.prototype = {};
Xtruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.string_thing = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.byte_thing = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.i32_thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.i64_thing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Xtruct.prototype.write = function(output) {
  output.writeStructBegin('Xtruct');
  if (this.string_thing !== null && this.string_thing !== undefined) {
    output.writeFieldBegin('string_thing', Thrift.Type.STRING, 1);
    output.writeString(this.string_thing);
    output.writeFieldEnd();
  }
  if (this.byte_thing !== null && this.byte_thing !== undefined) {
    output.writeFieldBegin('byte_thing', Thrift.Type.BYTE, 4);
    output.writeByte(this.byte_thing);
    output.writeFieldEnd();
  }
  if (this.i32_thing !== null && this.i32_thing !== undefined) {
    output.writeFieldBegin('i32_thing', Thrift.Type.I32, 9);
    output.writeI32(this.i32_thing);
    output.writeFieldEnd();
  }
  if (this.i64_thing !== null && this.i64_thing !== undefined) {
    output.writeFieldBegin('i64_thing', Thrift.Type.I64, 11);
    output.writeI64(this.i64_thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Xtruct2 = module.exports.Xtruct2 = function(args) {
  this.byte_thing = null;
  this.struct_thing = null;
  this.i32_thing = null;
  if (args) {
    if (args.byte_thing !== undefined && args.byte_thing !== null) {
      this.byte_thing = args.byte_thing;
    }
    if (args.struct_thing !== undefined && args.struct_thing !== null) {
      this.struct_thing = new ttypes.Xtruct(args.struct_thing);
    }
    if (args.i32_thing !== undefined && args.i32_thing !== null) {
      this.i32_thing = args.i32_thing;
    }
  }
};
Xtruct2.prototype = {};
Xtruct2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.byte_thing = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.struct_thing = new ttypes.Xtruct();
        this.struct_thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.i32_thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Xtruct2.prototype.write = function(output) {
  output.writeStructBegin('Xtruct2');
  if (this.byte_thing !== null && this.byte_thing !== undefined) {
    output.writeFieldBegin('byte_thing', Thrift.Type.BYTE, 1);
    output.writeByte(this.byte_thing);
    output.writeFieldEnd();
  }
  if (this.struct_thing !== null && this.struct_thing !== undefined) {
    output.writeFieldBegin('struct_thing', Thrift.Type.STRUCT, 2);
    this.struct_thing.write(output);
    output.writeFieldEnd();
  }
  if (this.i32_thing !== null && this.i32_thing !== undefined) {
    output.writeFieldBegin('i32_thing', Thrift.Type.I32, 3);
    output.writeI32(this.i32_thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Xtruct3 = module.exports.Xtruct3 = function(args) {
  this.string_thing = null;
  this.changed = null;
  this.i32_thing = null;
  this.i64_thing = null;
  if (args) {
    if (args.string_thing !== undefined && args.string_thing !== null) {
      this.string_thing = args.string_thing;
    }
    if (args.changed !== undefined && args.changed !== null) {
      this.changed = args.changed;
    }
    if (args.i32_thing !== undefined && args.i32_thing !== null) {
      this.i32_thing = args.i32_thing;
    }
    if (args.i64_thing !== undefined && args.i64_thing !== null) {
      this.i64_thing = args.i64_thing;
    }
  }
};
Xtruct3.prototype = {};
Xtruct3.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.string_thing = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.changed = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.i32_thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.i64_thing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Xtruct3.prototype.write = function(output) {
  output.writeStructBegin('Xtruct3');
  if (this.string_thing !== null && this.string_thing !== undefined) {
    output.writeFieldBegin('string_thing', Thrift.Type.STRING, 1);
    output.writeString(this.string_thing);
    output.writeFieldEnd();
  }
  if (this.changed !== null && this.changed !== undefined) {
    output.writeFieldBegin('changed', Thrift.Type.I32, 4);
    output.writeI32(this.changed);
    output.writeFieldEnd();
  }
  if (this.i32_thing !== null && this.i32_thing !== undefined) {
    output.writeFieldBegin('i32_thing', Thrift.Type.I32, 9);
    output.writeI32(this.i32_thing);
    output.writeFieldEnd();
  }
  if (this.i64_thing !== null && this.i64_thing !== undefined) {
    output.writeFieldBegin('i64_thing', Thrift.Type.I64, 11);
    output.writeI64(this.i64_thing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Insanity = module.exports.Insanity = function(args) {
  this.userMap = null;
  this.xtructs = null;
  if (args) {
    if (args.userMap !== undefined && args.userMap !== null) {
      this.userMap = Thrift.copyMap(args.userMap, [null]);
    }
    if (args.xtructs !== undefined && args.xtructs !== null) {
      this.xtructs = Thrift.copyList(args.xtructs, [ttypes.Xtruct]);
    }
  }
};
Insanity.prototype = {};
Insanity.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.userMap = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readI32();
          val4 = input.readI64();
          this.userMap[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.xtructs = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Xtruct();
          elem8.read(input);
          this.xtructs.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Insanity.prototype.write = function(output) {
  output.writeStructBegin('Insanity');
  if (this.userMap !== null && this.userMap !== undefined) {
    output.writeFieldBegin('userMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.userMap));
    for (var kiter9 in this.userMap) {
      if (this.userMap.hasOwnProperty(kiter9)) {
        var viter10 = this.userMap[kiter9];
        output.writeI32(kiter9);
        output.writeI64(viter10);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.xtructs !== null && this.xtructs !== undefined) {
    output.writeFieldBegin('xtructs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.xtructs.length);
    for (var iter11 in this.xtructs) {
      if (this.xtructs.hasOwnProperty(iter11)) {
        iter11 = this.xtructs[iter11];
        iter11.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CrazyNesting = module.exports.CrazyNesting = function(args) {
  this.string_field = null;
  this.set_field = null;
  this.list_field = null;
  this.binary_field = null;
  if (args) {
    if (args.string_field !== undefined && args.string_field !== null) {
      this.string_field = args.string_field;
    }
    if (args.set_field !== undefined && args.set_field !== null) {
      this.set_field = Thrift.copyList(args.set_field, [ttypes.Insanity]);
    }
    if (args.list_field !== undefined && args.list_field !== null) {
      this.list_field = Thrift.copyList(args.list_field, [Thrift.copyMap, Thrift.copyMap, Thrift.copyList, Thrift.copyList, Thrift.copyMap, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field list_field is unset!');
    }
    if (args.binary_field !== undefined && args.binary_field !== null) {
      this.binary_field = args.binary_field;
    }
  }
};
CrazyNesting.prototype = {};
CrazyNesting.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.string_field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.set_field = [];
        var _rtmp313 = input.readSetBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = new ttypes.Insanity();
          elem15.read(input);
          this.set_field.push(elem15);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.list_field = [];
        var _rtmp317 = input.readListBegin();
        var _size16 = _rtmp317.size || 0;
        for (var _i18 = 0; _i18 < _size16; ++_i18) {
          var elem19 = null;
          elem19 = {};
          var _rtmp321 = input.readMapBegin();
          var _size20 = _rtmp321.size || 0;
          for (var _i22 = 0; _i22 < _size20; ++_i22) {
            var key23 = null;
            var val24 = null;
            key23 = [];
            var _rtmp326 = input.readSetBegin();
            var _size25 = _rtmp326.size || 0;
            for (var _i27 = 0; _i27 < _size25; ++_i27) {
              var elem28 = null;
              elem28 = input.readI32();
              key23.push(elem28);
            }
            input.readSetEnd();
            val24 = {};
            var _rtmp330 = input.readMapBegin();
            var _size29 = _rtmp330.size || 0;
            for (var _i31 = 0; _i31 < _size29; ++_i31) {
              var key32 = null;
              var val33 = null;
              key32 = input.readI32();
              val33 = [];
              var _rtmp335 = input.readSetBegin();
              var _size34 = _rtmp335.size || 0;
              for (var _i36 = 0; _i36 < _size34; ++_i36) {
                var elem37 = null;
                elem37 = [];
                var _rtmp339 = input.readListBegin();
                var _size38 = _rtmp339.size || 0;
                for (var _i40 = 0; _i40 < _size38; ++_i40) {
                  var elem41 = null;
                  elem41 = {};
                  var _rtmp343 = input.readMapBegin();
                  var _size42 = _rtmp343.size || 0;
                  for (var _i44 = 0; _i44 < _size42; ++_i44) {
                    var key45 = null;
                    var val46 = null;
                    key45 = new ttypes.Insanity();
                    key45.read(input);
                    val46 = input.readString();
                    elem41[key45] = val46;
                  }
                  input.readMapEnd();
                  elem37.push(elem41);
                }
                input.readListEnd();
                val33.push(elem37);
              }
              input.readSetEnd();
              val24[key32] = val33;
            }
            input.readMapEnd();
            elem19[key23] = val24;
          }
          input.readMapEnd();
          this.list_field.push(elem19);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.binary_field = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrazyNesting.prototype.write = function(output) {
  output.writeStructBegin('CrazyNesting');
  if (this.string_field !== null && this.string_field !== undefined) {
    output.writeFieldBegin('string_field', Thrift.Type.STRING, 1);
    output.writeString(this.string_field);
    output.writeFieldEnd();
  }
  if (this.set_field !== null && this.set_field !== undefined) {
    output.writeFieldBegin('set_field', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.set_field.length);
    for (var iter47 in this.set_field) {
      if (this.set_field.hasOwnProperty(iter47)) {
        iter47 = this.set_field[iter47];
        iter47.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.list_field !== null && this.list_field !== undefined) {
    output.writeFieldBegin('list_field', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.MAP, this.list_field.length);
    for (var iter48 in this.list_field) {
      if (this.list_field.hasOwnProperty(iter48)) {
        iter48 = this.list_field[iter48];
        output.writeMapBegin(Thrift.Type.SET, Thrift.Type.MAP, Thrift.objectLength(iter48));
        for (var kiter49 in iter48) {
          if (iter48.hasOwnProperty(kiter49)) {
            var viter50 = iter48[kiter49];
            output.writeSetBegin(Thrift.Type.I32, kiter49.length);
            for (var iter51 in kiter49) {
              if (kiter49.hasOwnProperty(iter51)) {
                iter51 = kiter49[iter51];
                output.writeI32(iter51);
              }
            }
            output.writeSetEnd();
            output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter50));
            for (var kiter52 in viter50) {
              if (viter50.hasOwnProperty(kiter52)) {
                var viter53 = viter50[kiter52];
                output.writeI32(kiter52);
                output.writeSetBegin(Thrift.Type.LIST, viter53.length);
                for (var iter54 in viter53) {
                  if (viter53.hasOwnProperty(iter54)) {
                    iter54 = viter53[iter54];
                    output.writeListBegin(Thrift.Type.MAP, iter54.length);
                    for (var iter55 in iter54) {
                      if (iter54.hasOwnProperty(iter55)) {
                        iter55 = iter54[iter55];
                        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRING, Thrift.objectLength(iter55));
                        for (var kiter56 in iter55) {
                          if (iter55.hasOwnProperty(kiter56)) {
                            var viter57 = iter55[kiter56];
                            kiter56.write(output);
                            output.writeString(viter57);
                          }
                        }
                        output.writeMapEnd();
                      }
                    }
                    output.writeListEnd();
                  }
                }
                output.writeSetEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binary_field !== null && this.binary_field !== undefined) {
    output.writeFieldBegin('binary_field', Thrift.Type.STRING, 4);
    output.writeBinary(this.binary_field);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SomeUnion = module.exports.SomeUnion = function(args) {
  this.map_thing = null;
  this.string_thing = null;
  this.i32_thing = null;
  this.xtruct_thing = null;
  this.insanity_thing = null;
  if (args) {
    if (args.map_thing !== undefined && args.map_thing !== null) {
      this.map_thing = Thrift.copyMap(args.map_thing, [null]);
    }
    if (args.string_thing !== undefined && args.string_thing !== null) {
      this.string_thing = args.string_thing;
    }
    if (args.i32_thing !== undefined && args.i32_thing !== null) {
      this.i32_thing = args.i32_thing;
    }
    if (args.xtruct_thing !== undefined && args.xtruct_thing !== null) {
      this.xtruct_thing = new ttypes.Xtruct3(args.xtruct_thing);
    }
    if (args.insanity_thing !== undefined && args.insanity_thing !== null) {
      this.insanity_thing = new ttypes.Insanity(args.insanity_thing);
    }
  }
};
SomeUnion.prototype = {};
SomeUnion.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.map_thing = {};
        var _rtmp359 = input.readMapBegin();
        var _size58 = _rtmp359.size || 0;
        for (var _i60 = 0; _i60 < _size58; ++_i60) {
          var key61 = null;
          var val62 = null;
          key61 = input.readI32();
          val62 = input.readI64();
          this.map_thing[key61] = val62;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.string_thing = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.i32_thing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.xtruct_thing = new ttypes.Xtruct3();
        this.xtruct_thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.insanity_thing = new ttypes.Insanity();
        this.insanity_thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SomeUnion.prototype.write = function(output) {
  output.writeStructBegin('SomeUnion');
  if (this.map_thing !== null && this.map_thing !== undefined) {
    output.writeFieldBegin('map_thing', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.map_thing));
    for (var kiter63 in this.map_thing) {
      if (this.map_thing.hasOwnProperty(kiter63)) {
        var viter64 = this.map_thing[kiter63];
        output.writeI32(kiter63);
        output.writeI64(viter64);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.string_thing !== null && this.string_thing !== undefined) {
    output.writeFieldBegin('string_thing', Thrift.Type.STRING, 2);
    output.writeString(this.string_thing);
    output.writeFieldEnd();
  }
  if (this.i32_thing !== null && this.i32_thing !== undefined) {
    output.writeFieldBegin('i32_thing', Thrift.Type.I32, 3);
    output.writeI32(this.i32_thing);
    output.writeFieldEnd();
  }
  if (this.xtruct_thing !== null && this.xtruct_thing !== undefined) {
    output.writeFieldBegin('xtruct_thing', Thrift.Type.STRUCT, 4);
    this.xtruct_thing.write(output);
    output.writeFieldEnd();
  }
  if (this.insanity_thing !== null && this.insanity_thing !== undefined) {
    output.writeFieldBegin('insanity_thing', Thrift.Type.STRUCT, 5);
    this.insanity_thing.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Xception = module.exports.Xception = function(args) {
  Thrift.TException.call(this, "Xception");
  this.name = "Xception";
  this.errorCode = null;
  this.message = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(Xception, Thrift.TException);
Xception.prototype.name = 'Xception';
Xception.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Xception.prototype.write = function(output) {
  output.writeStructBegin('Xception');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Xception2 = module.exports.Xception2 = function(args) {
  Thrift.TException.call(this, "Xception2");
  this.name = "Xception2";
  this.errorCode = null;
  this.struct_thing = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.struct_thing !== undefined && args.struct_thing !== null) {
      this.struct_thing = new ttypes.Xtruct(args.struct_thing);
    }
  }
};
Thrift.inherits(Xception2, Thrift.TException);
Xception2.prototype.name = 'Xception2';
Xception2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.struct_thing = new ttypes.Xtruct();
        this.struct_thing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Xception2.prototype.write = function(output) {
  output.writeStructBegin('Xception2');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.struct_thing !== null && this.struct_thing !== undefined) {
    output.writeFieldBegin('struct_thing', Thrift.Type.STRUCT, 2);
    this.struct_thing.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmptyStruct = module.exports.EmptyStruct = function(args) {
};
EmptyStruct.prototype = {};
EmptyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmptyStruct.prototype.write = function(output) {
  output.writeStructBegin('EmptyStruct');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OneField = module.exports.OneField = function(args) {
  this.field = null;
  if (args) {
    if (args.field !== undefined && args.field !== null) {
      this.field = new ttypes.EmptyStruct(args.field);
    }
  }
};
OneField.prototype = {};
OneField.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.field = new ttypes.EmptyStruct();
        this.field.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OneField.prototype.write = function(output) {
  output.writeStructBegin('OneField');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRUCT, 1);
    this.field.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersioningTestV1 = module.exports.VersioningTestV1 = function(args) {
  this.begin_in_both = null;
  this.old_string = null;
  this.end_in_both = null;
  if (args) {
    if (args.begin_in_both !== undefined && args.begin_in_both !== null) {
      this.begin_in_both = args.begin_in_both;
    }
    if (args.old_string !== undefined && args.old_string !== null) {
      this.old_string = args.old_string;
    }
    if (args.end_in_both !== undefined && args.end_in_both !== null) {
      this.end_in_both = args.end_in_both;
    }
  }
};
VersioningTestV1.prototype = {};
VersioningTestV1.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.begin_in_both = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.old_string = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.end_in_both = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersioningTestV1.prototype.write = function(output) {
  output.writeStructBegin('VersioningTestV1');
  if (this.begin_in_both !== null && this.begin_in_both !== undefined) {
    output.writeFieldBegin('begin_in_both', Thrift.Type.I32, 1);
    output.writeI32(this.begin_in_both);
    output.writeFieldEnd();
  }
  if (this.old_string !== null && this.old_string !== undefined) {
    output.writeFieldBegin('old_string', Thrift.Type.STRING, 3);
    output.writeString(this.old_string);
    output.writeFieldEnd();
  }
  if (this.end_in_both !== null && this.end_in_both !== undefined) {
    output.writeFieldBegin('end_in_both', Thrift.Type.I32, 12);
    output.writeI32(this.end_in_both);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersioningTestV2 = module.exports.VersioningTestV2 = function(args) {
  this.begin_in_both = null;
  this.newint = null;
  this.newbyte = null;
  this.newshort = null;
  this.newlong = null;
  this.newdouble = null;
  this.newstruct = null;
  this.newlist = null;
  this.newset = null;
  this.newmap = null;
  this.newstring = null;
  this.end_in_both = null;
  if (args) {
    if (args.begin_in_both !== undefined && args.begin_in_both !== null) {
      this.begin_in_both = args.begin_in_both;
    }
    if (args.newint !== undefined && args.newint !== null) {
      this.newint = args.newint;
    }
    if (args.newbyte !== undefined && args.newbyte !== null) {
      this.newbyte = args.newbyte;
    }
    if (args.newshort !== undefined && args.newshort !== null) {
      this.newshort = args.newshort;
    }
    if (args.newlong !== undefined && args.newlong !== null) {
      this.newlong = args.newlong;
    }
    if (args.newdouble !== undefined && args.newdouble !== null) {
      this.newdouble = args.newdouble;
    }
    if (args.newstruct !== undefined && args.newstruct !== null) {
      this.newstruct = new ttypes.Bonk(args.newstruct);
    }
    if (args.newlist !== undefined && args.newlist !== null) {
      this.newlist = Thrift.copyList(args.newlist, [null]);
    }
    if (args.newset !== undefined && args.newset !== null) {
      this.newset = Thrift.copyList(args.newset, [null]);
    }
    if (args.newmap !== undefined && args.newmap !== null) {
      this.newmap = Thrift.copyMap(args.newmap, [null]);
    }
    if (args.newstring !== undefined && args.newstring !== null) {
      this.newstring = args.newstring;
    }
    if (args.end_in_both !== undefined && args.end_in_both !== null) {
      this.end_in_both = args.end_in_both;
    }
  }
};
VersioningTestV2.prototype = {};
VersioningTestV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.begin_in_both = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.newint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.newbyte = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.newshort = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.newlong = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.newdouble = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.newstruct = new ttypes.Bonk();
        this.newstruct.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.newlist = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readI32();
          this.newlist.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        this.newset = [];
        var _rtmp370 = input.readSetBegin();
        var _size69 = _rtmp370.size || 0;
        for (var _i71 = 0; _i71 < _size69; ++_i71) {
          var elem72 = null;
          elem72 = input.readI32();
          this.newset.push(elem72);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.newmap = {};
        var _rtmp374 = input.readMapBegin();
        var _size73 = _rtmp374.size || 0;
        for (var _i75 = 0; _i75 < _size73; ++_i75) {
          var key76 = null;
          var val77 = null;
          key76 = input.readI32();
          val77 = input.readI32();
          this.newmap[key76] = val77;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.newstring = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.end_in_both = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersioningTestV2.prototype.write = function(output) {
  output.writeStructBegin('VersioningTestV2');
  if (this.begin_in_both !== null && this.begin_in_both !== undefined) {
    output.writeFieldBegin('begin_in_both', Thrift.Type.I32, 1);
    output.writeI32(this.begin_in_both);
    output.writeFieldEnd();
  }
  if (this.newint !== null && this.newint !== undefined) {
    output.writeFieldBegin('newint', Thrift.Type.I32, 2);
    output.writeI32(this.newint);
    output.writeFieldEnd();
  }
  if (this.newbyte !== null && this.newbyte !== undefined) {
    output.writeFieldBegin('newbyte', Thrift.Type.BYTE, 3);
    output.writeByte(this.newbyte);
    output.writeFieldEnd();
  }
  if (this.newshort !== null && this.newshort !== undefined) {
    output.writeFieldBegin('newshort', Thrift.Type.I16, 4);
    output.writeI16(this.newshort);
    output.writeFieldEnd();
  }
  if (this.newlong !== null && this.newlong !== undefined) {
    output.writeFieldBegin('newlong', Thrift.Type.I64, 5);
    output.writeI64(this.newlong);
    output.writeFieldEnd();
  }
  if (this.newdouble !== null && this.newdouble !== undefined) {
    output.writeFieldBegin('newdouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.newdouble);
    output.writeFieldEnd();
  }
  if (this.newstruct !== null && this.newstruct !== undefined) {
    output.writeFieldBegin('newstruct', Thrift.Type.STRUCT, 7);
    this.newstruct.write(output);
    output.writeFieldEnd();
  }
  if (this.newlist !== null && this.newlist !== undefined) {
    output.writeFieldBegin('newlist', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I32, this.newlist.length);
    for (var iter78 in this.newlist) {
      if (this.newlist.hasOwnProperty(iter78)) {
        iter78 = this.newlist[iter78];
        output.writeI32(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.newset !== null && this.newset !== undefined) {
    output.writeFieldBegin('newset', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.I32, this.newset.length);
    for (var iter79 in this.newset) {
      if (this.newset.hasOwnProperty(iter79)) {
        iter79 = this.newset[iter79];
        output.writeI32(iter79);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.newmap !== null && this.newmap !== undefined) {
    output.writeFieldBegin('newmap', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.newmap));
    for (var kiter80 in this.newmap) {
      if (this.newmap.hasOwnProperty(kiter80)) {
        var viter81 = this.newmap[kiter80];
        output.writeI32(kiter80);
        output.writeI32(viter81);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.newstring !== null && this.newstring !== undefined) {
    output.writeFieldBegin('newstring', Thrift.Type.STRING, 11);
    output.writeString(this.newstring);
    output.writeFieldEnd();
  }
  if (this.end_in_both !== null && this.end_in_both !== undefined) {
    output.writeFieldBegin('end_in_both', Thrift.Type.I32, 12);
    output.writeI32(this.end_in_both);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListTypeVersioningV1 = module.exports.ListTypeVersioningV1 = function(args) {
  this.myints = null;
  this.hello = null;
  if (args) {
    if (args.myints !== undefined && args.myints !== null) {
      this.myints = Thrift.copyList(args.myints, [null]);
    }
    if (args.hello !== undefined && args.hello !== null) {
      this.hello = args.hello;
    }
  }
};
ListTypeVersioningV1.prototype = {};
ListTypeVersioningV1.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.myints = [];
        var _rtmp383 = input.readListBegin();
        var _size82 = _rtmp383.size || 0;
        for (var _i84 = 0; _i84 < _size82; ++_i84) {
          var elem85 = null;
          elem85 = input.readI32();
          this.myints.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hello = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTypeVersioningV1.prototype.write = function(output) {
  output.writeStructBegin('ListTypeVersioningV1');
  if (this.myints !== null && this.myints !== undefined) {
    output.writeFieldBegin('myints', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.myints.length);
    for (var iter86 in this.myints) {
      if (this.myints.hasOwnProperty(iter86)) {
        iter86 = this.myints[iter86];
        output.writeI32(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hello !== null && this.hello !== undefined) {
    output.writeFieldBegin('hello', Thrift.Type.STRING, 2);
    output.writeString(this.hello);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListTypeVersioningV2 = module.exports.ListTypeVersioningV2 = function(args) {
  this.strings = null;
  this.hello = null;
  if (args) {
    if (args.strings !== undefined && args.strings !== null) {
      this.strings = Thrift.copyList(args.strings, [null]);
    }
    if (args.hello !== undefined && args.hello !== null) {
      this.hello = args.hello;
    }
  }
};
ListTypeVersioningV2.prototype = {};
ListTypeVersioningV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.strings = [];
        var _rtmp388 = input.readListBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var elem90 = null;
          elem90 = input.readString();
          this.strings.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hello = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTypeVersioningV2.prototype.write = function(output) {
  output.writeStructBegin('ListTypeVersioningV2');
  if (this.strings !== null && this.strings !== undefined) {
    output.writeFieldBegin('strings', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.strings.length);
    for (var iter91 in this.strings) {
      if (this.strings.hasOwnProperty(iter91)) {
        iter91 = this.strings[iter91];
        output.writeString(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hello !== null && this.hello !== undefined) {
    output.writeFieldBegin('hello', Thrift.Type.STRING, 2);
    output.writeString(this.hello);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GuessProtocolStruct = module.exports.GuessProtocolStruct = function(args) {
  this.map_field = null;
  if (args) {
    if (args.map_field !== undefined && args.map_field !== null) {
      this.map_field = Thrift.copyMap(args.map_field, [null]);
    }
  }
};
GuessProtocolStruct.prototype = {};
GuessProtocolStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.map_field = {};
        var _rtmp393 = input.readMapBegin();
        var _size92 = _rtmp393.size || 0;
        for (var _i94 = 0; _i94 < _size92; ++_i94) {
          var key95 = null;
          var val96 = null;
          key95 = input.readString();
          val96 = input.readString();
          this.map_field[key95] = val96;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GuessProtocolStruct.prototype.write = function(output) {
  output.writeStructBegin('GuessProtocolStruct');
  if (this.map_field !== null && this.map_field !== undefined) {
    output.writeFieldBegin('map_field', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.map_field));
    for (var kiter97 in this.map_field) {
      if (this.map_field.hasOwnProperty(kiter97)) {
        var viter98 = this.map_field[kiter97];
        output.writeString(kiter97);
        output.writeString(viter98);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LargeDeltas = module.exports.LargeDeltas = function(args) {
  this.b1 = null;
  this.b10 = null;
  this.b100 = null;
  this.check_true = null;
  this.b1000 = null;
  this.check_false = null;
  this.vertwo2000 = null;
  this.a_set2500 = null;
  this.vertwo3000 = null;
  this.big_numbers = null;
  if (args) {
    if (args.b1 !== undefined && args.b1 !== null) {
      this.b1 = new ttypes.Bools(args.b1);
    }
    if (args.b10 !== undefined && args.b10 !== null) {
      this.b10 = new ttypes.Bools(args.b10);
    }
    if (args.b100 !== undefined && args.b100 !== null) {
      this.b100 = new ttypes.Bools(args.b100);
    }
    if (args.check_true !== undefined && args.check_true !== null) {
      this.check_true = args.check_true;
    }
    if (args.b1000 !== undefined && args.b1000 !== null) {
      this.b1000 = new ttypes.Bools(args.b1000);
    }
    if (args.check_false !== undefined && args.check_false !== null) {
      this.check_false = args.check_false;
    }
    if (args.vertwo2000 !== undefined && args.vertwo2000 !== null) {
      this.vertwo2000 = new ttypes.VersioningTestV2(args.vertwo2000);
    }
    if (args.a_set2500 !== undefined && args.a_set2500 !== null) {
      this.a_set2500 = Thrift.copyList(args.a_set2500, [null]);
    }
    if (args.vertwo3000 !== undefined && args.vertwo3000 !== null) {
      this.vertwo3000 = new ttypes.VersioningTestV2(args.vertwo3000);
    }
    if (args.big_numbers !== undefined && args.big_numbers !== null) {
      this.big_numbers = Thrift.copyList(args.big_numbers, [null]);
    }
  }
};
LargeDeltas.prototype = {};
LargeDeltas.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.b1 = new ttypes.Bools();
        this.b1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.b10 = new ttypes.Bools();
        this.b10.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.STRUCT) {
        this.b100 = new ttypes.Bools();
        this.b100.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 500:
      if (ftype == Thrift.Type.BOOL) {
        this.check_true = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1000:
      if (ftype == Thrift.Type.STRUCT) {
        this.b1000 = new ttypes.Bools();
        this.b1000.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1500:
      if (ftype == Thrift.Type.BOOL) {
        this.check_false = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2000:
      if (ftype == Thrift.Type.STRUCT) {
        this.vertwo2000 = new ttypes.VersioningTestV2();
        this.vertwo2000.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2500:
      if (ftype == Thrift.Type.SET) {
        this.a_set2500 = [];
        var _rtmp3100 = input.readSetBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = input.readString();
          this.a_set2500.push(elem102);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3000:
      if (ftype == Thrift.Type.STRUCT) {
        this.vertwo3000 = new ttypes.VersioningTestV2();
        this.vertwo3000.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4000:
      if (ftype == Thrift.Type.LIST) {
        this.big_numbers = [];
        var _rtmp3104 = input.readListBegin();
        var _size103 = _rtmp3104.size || 0;
        for (var _i105 = 0; _i105 < _size103; ++_i105) {
          var elem106 = null;
          elem106 = input.readI32();
          this.big_numbers.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LargeDeltas.prototype.write = function(output) {
  output.writeStructBegin('LargeDeltas');
  if (this.b1 !== null && this.b1 !== undefined) {
    output.writeFieldBegin('b1', Thrift.Type.STRUCT, 1);
    this.b1.write(output);
    output.writeFieldEnd();
  }
  if (this.b10 !== null && this.b10 !== undefined) {
    output.writeFieldBegin('b10', Thrift.Type.STRUCT, 10);
    this.b10.write(output);
    output.writeFieldEnd();
  }
  if (this.b100 !== null && this.b100 !== undefined) {
    output.writeFieldBegin('b100', Thrift.Type.STRUCT, 100);
    this.b100.write(output);
    output.writeFieldEnd();
  }
  if (this.check_true !== null && this.check_true !== undefined) {
    output.writeFieldBegin('check_true', Thrift.Type.BOOL, 500);
    output.writeBool(this.check_true);
    output.writeFieldEnd();
  }
  if (this.b1000 !== null && this.b1000 !== undefined) {
    output.writeFieldBegin('b1000', Thrift.Type.STRUCT, 1000);
    this.b1000.write(output);
    output.writeFieldEnd();
  }
  if (this.check_false !== null && this.check_false !== undefined) {
    output.writeFieldBegin('check_false', Thrift.Type.BOOL, 1500);
    output.writeBool(this.check_false);
    output.writeFieldEnd();
  }
  if (this.vertwo2000 !== null && this.vertwo2000 !== undefined) {
    output.writeFieldBegin('vertwo2000', Thrift.Type.STRUCT, 2000);
    this.vertwo2000.write(output);
    output.writeFieldEnd();
  }
  if (this.a_set2500 !== null && this.a_set2500 !== undefined) {
    output.writeFieldBegin('a_set2500', Thrift.Type.SET, 2500);
    output.writeSetBegin(Thrift.Type.STRING, this.a_set2500.length);
    for (var iter107 in this.a_set2500) {
      if (this.a_set2500.hasOwnProperty(iter107)) {
        iter107 = this.a_set2500[iter107];
        output.writeString(iter107);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.vertwo3000 !== null && this.vertwo3000 !== undefined) {
    output.writeFieldBegin('vertwo3000', Thrift.Type.STRUCT, 3000);
    this.vertwo3000.write(output);
    output.writeFieldEnd();
  }
  if (this.big_numbers !== null && this.big_numbers !== undefined) {
    output.writeFieldBegin('big_numbers', Thrift.Type.LIST, 4000);
    output.writeListBegin(Thrift.Type.I32, this.big_numbers.length);
    for (var iter108 in this.big_numbers) {
      if (this.big_numbers.hasOwnProperty(iter108)) {
        iter108 = this.big_numbers[iter108];
        output.writeI32(iter108);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NestedListsI32x2 = module.exports.NestedListsI32x2 = function(args) {
  this.integerlist = null;
  if (args) {
    if (args.integerlist !== undefined && args.integerlist !== null) {
      this.integerlist = Thrift.copyList(args.integerlist, [Thrift.copyList, null]);
    }
  }
};
NestedListsI32x2.prototype = {};
NestedListsI32x2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.integerlist = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = [];
          var _rtmp3114 = input.readListBegin();
          var _size113 = _rtmp3114.size || 0;
          for (var _i115 = 0; _i115 < _size113; ++_i115) {
            var elem116 = null;
            elem116 = input.readI32();
            elem112.push(elem116);
          }
          input.readListEnd();
          this.integerlist.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NestedListsI32x2.prototype.write = function(output) {
  output.writeStructBegin('NestedListsI32x2');
  if (this.integerlist !== null && this.integerlist !== undefined) {
    output.writeFieldBegin('integerlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.integerlist.length);
    for (var iter117 in this.integerlist) {
      if (this.integerlist.hasOwnProperty(iter117)) {
        iter117 = this.integerlist[iter117];
        output.writeListBegin(Thrift.Type.I32, iter117.length);
        for (var iter118 in iter117) {
          if (iter117.hasOwnProperty(iter118)) {
            iter118 = iter117[iter118];
            output.writeI32(iter118);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NestedListsI32x3 = module.exports.NestedListsI32x3 = function(args) {
  this.integerlist = null;
  if (args) {
    if (args.integerlist !== undefined && args.integerlist !== null) {
      this.integerlist = Thrift.copyList(args.integerlist, [Thrift.copyList, Thrift.copyList, null]);
    }
  }
};
NestedListsI32x3.prototype = {};
NestedListsI32x3.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.integerlist = [];
        var _rtmp3120 = input.readListBegin();
        var _size119 = _rtmp3120.size || 0;
        for (var _i121 = 0; _i121 < _size119; ++_i121) {
          var elem122 = null;
          elem122 = [];
          var _rtmp3124 = input.readListBegin();
          var _size123 = _rtmp3124.size || 0;
          for (var _i125 = 0; _i125 < _size123; ++_i125) {
            var elem126 = null;
            elem126 = [];
            var _rtmp3128 = input.readListBegin();
            var _size127 = _rtmp3128.size || 0;
            for (var _i129 = 0; _i129 < _size127; ++_i129) {
              var elem130 = null;
              elem130 = input.readI32();
              elem126.push(elem130);
            }
            input.readListEnd();
            elem122.push(elem126);
          }
          input.readListEnd();
          this.integerlist.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NestedListsI32x3.prototype.write = function(output) {
  output.writeStructBegin('NestedListsI32x3');
  if (this.integerlist !== null && this.integerlist !== undefined) {
    output.writeFieldBegin('integerlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.integerlist.length);
    for (var iter131 in this.integerlist) {
      if (this.integerlist.hasOwnProperty(iter131)) {
        iter131 = this.integerlist[iter131];
        output.writeListBegin(Thrift.Type.LIST, iter131.length);
        for (var iter132 in iter131) {
          if (iter131.hasOwnProperty(iter132)) {
            iter132 = iter131[iter132];
            output.writeListBegin(Thrift.Type.I32, iter132.length);
            for (var iter133 in iter132) {
              if (iter132.hasOwnProperty(iter133)) {
                iter133 = iter132[iter133];
                output.writeI32(iter133);
              }
            }
            output.writeListEnd();
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NestedMixedx2 = module.exports.NestedMixedx2 = function(args) {
  this.int_set_list = null;
  this.map_int_strset = null;
  this.map_int_strset_list = null;
  if (args) {
    if (args.int_set_list !== undefined && args.int_set_list !== null) {
      this.int_set_list = Thrift.copyList(args.int_set_list, [Thrift.copyList, null]);
    }
    if (args.map_int_strset !== undefined && args.map_int_strset !== null) {
      this.map_int_strset = Thrift.copyMap(args.map_int_strset, [Thrift.copyList, null]);
    }
    if (args.map_int_strset_list !== undefined && args.map_int_strset_list !== null) {
      this.map_int_strset_list = Thrift.copyList(args.map_int_strset_list, [Thrift.copyMap, Thrift.copyList, null]);
    }
  }
};
NestedMixedx2.prototype = {};
NestedMixedx2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.int_set_list = [];
        var _rtmp3135 = input.readListBegin();
        var _size134 = _rtmp3135.size || 0;
        for (var _i136 = 0; _i136 < _size134; ++_i136) {
          var elem137 = null;
          elem137 = [];
          var _rtmp3139 = input.readSetBegin();
          var _size138 = _rtmp3139.size || 0;
          for (var _i140 = 0; _i140 < _size138; ++_i140) {
            var elem141 = null;
            elem141 = input.readI32();
            elem137.push(elem141);
          }
          input.readSetEnd();
          this.int_set_list.push(elem137);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.map_int_strset = {};
        var _rtmp3143 = input.readMapBegin();
        var _size142 = _rtmp3143.size || 0;
        for (var _i144 = 0; _i144 < _size142; ++_i144) {
          var key145 = null;
          var val146 = null;
          key145 = input.readI32();
          val146 = [];
          var _rtmp3148 = input.readSetBegin();
          var _size147 = _rtmp3148.size || 0;
          for (var _i149 = 0; _i149 < _size147; ++_i149) {
            var elem150 = null;
            elem150 = input.readString();
            val146.push(elem150);
          }
          input.readSetEnd();
          this.map_int_strset[key145] = val146;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.map_int_strset_list = [];
        var _rtmp3152 = input.readListBegin();
        var _size151 = _rtmp3152.size || 0;
        for (var _i153 = 0; _i153 < _size151; ++_i153) {
          var elem154 = null;
          elem154 = {};
          var _rtmp3156 = input.readMapBegin();
          var _size155 = _rtmp3156.size || 0;
          for (var _i157 = 0; _i157 < _size155; ++_i157) {
            var key158 = null;
            var val159 = null;
            key158 = input.readI32();
            val159 = [];
            var _rtmp3161 = input.readSetBegin();
            var _size160 = _rtmp3161.size || 0;
            for (var _i162 = 0; _i162 < _size160; ++_i162) {
              var elem163 = null;
              elem163 = input.readString();
              val159.push(elem163);
            }
            input.readSetEnd();
            elem154[key158] = val159;
          }
          input.readMapEnd();
          this.map_int_strset_list.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NestedMixedx2.prototype.write = function(output) {
  output.writeStructBegin('NestedMixedx2');
  if (this.int_set_list !== null && this.int_set_list !== undefined) {
    output.writeFieldBegin('int_set_list', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.SET, this.int_set_list.length);
    for (var iter164 in this.int_set_list) {
      if (this.int_set_list.hasOwnProperty(iter164)) {
        iter164 = this.int_set_list[iter164];
        output.writeSetBegin(Thrift.Type.I32, iter164.length);
        for (var iter165 in iter164) {
          if (iter164.hasOwnProperty(iter165)) {
            iter165 = iter164[iter165];
            output.writeI32(iter165);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.map_int_strset !== null && this.map_int_strset !== undefined) {
    output.writeFieldBegin('map_int_strset', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.map_int_strset));
    for (var kiter166 in this.map_int_strset) {
      if (this.map_int_strset.hasOwnProperty(kiter166)) {
        var viter167 = this.map_int_strset[kiter166];
        output.writeI32(kiter166);
        output.writeSetBegin(Thrift.Type.STRING, viter167.length);
        for (var iter168 in viter167) {
          if (viter167.hasOwnProperty(iter168)) {
            iter168 = viter167[iter168];
            output.writeString(iter168);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.map_int_strset_list !== null && this.map_int_strset_list !== undefined) {
    output.writeFieldBegin('map_int_strset_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.MAP, this.map_int_strset_list.length);
    for (var iter169 in this.map_int_strset_list) {
      if (this.map_int_strset_list.hasOwnProperty(iter169)) {
        iter169 = this.map_int_strset_list[iter169];
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(iter169));
        for (var kiter170 in iter169) {
          if (iter169.hasOwnProperty(kiter170)) {
            var viter171 = iter169[kiter170];
            output.writeI32(kiter170);
            output.writeSetBegin(Thrift.Type.STRING, viter171.length);
            for (var iter172 in viter171) {
              if (viter171.hasOwnProperty(iter172)) {
                iter172 = viter171[iter172];
                output.writeString(iter172);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListBonks = module.exports.ListBonks = function(args) {
  this.bonk = null;
  if (args) {
    if (args.bonk !== undefined && args.bonk !== null) {
      this.bonk = Thrift.copyList(args.bonk, [ttypes.Bonk]);
    }
  }
};
ListBonks.prototype = {};
ListBonks.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.bonk = [];
        var _rtmp3174 = input.readListBegin();
        var _size173 = _rtmp3174.size || 0;
        for (var _i175 = 0; _i175 < _size173; ++_i175) {
          var elem176 = null;
          elem176 = new ttypes.Bonk();
          elem176.read(input);
          this.bonk.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListBonks.prototype.write = function(output) {
  output.writeStructBegin('ListBonks');
  if (this.bonk !== null && this.bonk !== undefined) {
    output.writeFieldBegin('bonk', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.bonk.length);
    for (var iter177 in this.bonk) {
      if (this.bonk.hasOwnProperty(iter177)) {
        iter177 = this.bonk[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NestedListsBonk = module.exports.NestedListsBonk = function(args) {
  this.bonk = null;
  if (args) {
    if (args.bonk !== undefined && args.bonk !== null) {
      this.bonk = Thrift.copyList(args.bonk, [Thrift.copyList, Thrift.copyList, ttypes.Bonk]);
    }
  }
};
NestedListsBonk.prototype = {};
NestedListsBonk.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.bonk = [];
        var _rtmp3179 = input.readListBegin();
        var _size178 = _rtmp3179.size || 0;
        for (var _i180 = 0; _i180 < _size178; ++_i180) {
          var elem181 = null;
          elem181 = [];
          var _rtmp3183 = input.readListBegin();
          var _size182 = _rtmp3183.size || 0;
          for (var _i184 = 0; _i184 < _size182; ++_i184) {
            var elem185 = null;
            elem185 = [];
            var _rtmp3187 = input.readListBegin();
            var _size186 = _rtmp3187.size || 0;
            for (var _i188 = 0; _i188 < _size186; ++_i188) {
              var elem189 = null;
              elem189 = new ttypes.Bonk();
              elem189.read(input);
              elem185.push(elem189);
            }
            input.readListEnd();
            elem181.push(elem185);
          }
          input.readListEnd();
          this.bonk.push(elem181);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NestedListsBonk.prototype.write = function(output) {
  output.writeStructBegin('NestedListsBonk');
  if (this.bonk !== null && this.bonk !== undefined) {
    output.writeFieldBegin('bonk', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.bonk.length);
    for (var iter190 in this.bonk) {
      if (this.bonk.hasOwnProperty(iter190)) {
        iter190 = this.bonk[iter190];
        output.writeListBegin(Thrift.Type.LIST, iter190.length);
        for (var iter191 in iter190) {
          if (iter190.hasOwnProperty(iter191)) {
            iter191 = iter190[iter191];
            output.writeListBegin(Thrift.Type.STRUCT, iter191.length);
            for (var iter192 in iter191) {
              if (iter191.hasOwnProperty(iter192)) {
                iter192 = iter191[iter192];
                iter192.write(output);
              }
            }
            output.writeListEnd();
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BoolTest = module.exports.BoolTest = function(args) {
  this.b = true;
  this.s = 'true';
  if (args) {
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    }
  }
};
BoolTest.prototype = {};
BoolTest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.b = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.s = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoolTest.prototype.write = function(output) {
  output.writeStructBegin('BoolTest');
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.BOOL, 1);
    output.writeBool(this.b);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRING, 2);
    output.writeString(this.s);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StructA = module.exports.StructA = function(args) {
  this.s = null;
  if (args) {
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field s is unset!');
    }
  }
};
StructA.prototype = {};
StructA.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.s = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StructA.prototype.write = function(output) {
  output.writeStructBegin('StructA');
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRING, 1);
    output.writeString(this.s);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StructB = module.exports.StructB = function(args) {
  this.aa = null;
  this.ab = null;
  if (args) {
    if (args.aa !== undefined && args.aa !== null) {
      this.aa = new ttypes.StructA(args.aa);
    }
    if (args.ab !== undefined && args.ab !== null) {
      this.ab = new ttypes.StructA(args.ab);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ab is unset!');
    }
  }
};
StructB.prototype = {};
StructB.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aa = new ttypes.StructA();
        this.aa.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ab = new ttypes.StructA();
        this.ab.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StructB.prototype.write = function(output) {
  output.writeStructBegin('StructB');
  if (this.aa !== null && this.aa !== undefined) {
    output.writeFieldBegin('aa', Thrift.Type.STRUCT, 1);
    this.aa.write(output);
    output.writeFieldEnd();
  }
  if (this.ab !== null && this.ab !== undefined) {
    output.writeFieldBegin('ab', Thrift.Type.STRUCT, 2);
    this.ab.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionalSetDefaultTest = module.exports.OptionalSetDefaultTest = function(args) {
  this.with_default = ['test'];
  if (args) {
    if (args.with_default !== undefined && args.with_default !== null) {
      this.with_default = Thrift.copyList(args.with_default, [null]);
    }
  }
};
OptionalSetDefaultTest.prototype = {};
OptionalSetDefaultTest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.with_default = [];
        var _rtmp3194 = input.readSetBegin();
        var _size193 = _rtmp3194.size || 0;
        for (var _i195 = 0; _i195 < _size193; ++_i195) {
          var elem196 = null;
          elem196 = input.readString();
          this.with_default.push(elem196);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionalSetDefaultTest.prototype.write = function(output) {
  output.writeStructBegin('OptionalSetDefaultTest');
  if (this.with_default !== null && this.with_default !== undefined) {
    output.writeFieldBegin('with_default', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.with_default.length);
    for (var iter197 in this.with_default) {
      if (this.with_default.hasOwnProperty(iter197)) {
        iter197 = this.with_default[iter197];
        output.writeString(iter197);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionalBinary = module.exports.OptionalBinary = function(args) {
  this.bin_set = [];
  this.bin_map = {

  };
  if (args) {
    if (args.bin_set !== undefined && args.bin_set !== null) {
      this.bin_set = Thrift.copyList(args.bin_set, [null]);
    }
    if (args.bin_map !== undefined && args.bin_map !== null) {
      this.bin_map = Thrift.copyMap(args.bin_map, [null]);
    }
  }
};
OptionalBinary.prototype = {};
OptionalBinary.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.bin_set = [];
        var _rtmp3199 = input.readSetBegin();
        var _size198 = _rtmp3199.size || 0;
        for (var _i200 = 0; _i200 < _size198; ++_i200) {
          var elem201 = null;
          elem201 = input.readBinary();
          this.bin_set.push(elem201);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.bin_map = {};
        var _rtmp3203 = input.readMapBegin();
        var _size202 = _rtmp3203.size || 0;
        for (var _i204 = 0; _i204 < _size202; ++_i204) {
          var key205 = null;
          var val206 = null;
          key205 = input.readBinary();
          val206 = input.readI32();
          this.bin_map[key205] = val206;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionalBinary.prototype.write = function(output) {
  output.writeStructBegin('OptionalBinary');
  if (this.bin_set !== null && this.bin_set !== undefined) {
    output.writeFieldBegin('bin_set', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.bin_set.length);
    for (var iter207 in this.bin_set) {
      if (this.bin_set.hasOwnProperty(iter207)) {
        iter207 = this.bin_set[iter207];
        output.writeBinary(iter207);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.bin_map !== null && this.bin_map !== undefined) {
    output.writeFieldBegin('bin_map', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.bin_map));
    for (var kiter208 in this.bin_map) {
      if (this.bin_map.hasOwnProperty(kiter208)) {
        var viter209 = this.bin_map[kiter208];
        output.writeBinary(kiter208);
        output.writeI32(viter209);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.myNumberz = 1;
