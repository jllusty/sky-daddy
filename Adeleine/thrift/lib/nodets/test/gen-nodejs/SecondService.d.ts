//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./ThriftTest_types');
import Numberz = ttypes.Numberz
import myNumberz = ttypes.myNumberz
import Xception = ttypes.Xception
import Xception2 = ttypes.Xception2
import Bonk = ttypes.Bonk
import Bools = ttypes.Bools
import Xtruct = ttypes.Xtruct
import Xtruct2 = ttypes.Xtruct2
import Xtruct3 = ttypes.Xtruct3
import Insanity = ttypes.Insanity
import CrazyNesting = ttypes.CrazyNesting
import SomeUnion = ttypes.SomeUnion
import EmptyStruct = ttypes.EmptyStruct
import OneField = ttypes.OneField
import VersioningTestV1 = ttypes.VersioningTestV1
import VersioningTestV2 = ttypes.VersioningTestV2
import ListTypeVersioningV1 = ttypes.ListTypeVersioningV1
import ListTypeVersioningV2 = ttypes.ListTypeVersioningV2
import GuessProtocolStruct = ttypes.GuessProtocolStruct
import LargeDeltas = ttypes.LargeDeltas
import NestedListsI32x2 = ttypes.NestedListsI32x2
import NestedListsI32x3 = ttypes.NestedListsI32x3
import NestedMixedx2 = ttypes.NestedMixedx2
import ListBonks = ttypes.ListBonks
import NestedListsBonk = ttypes.NestedListsBonk
import BoolTest = ttypes.BoolTest
import StructA = ttypes.StructA
import StructB = ttypes.StructB
import OptionalSetDefaultTest = ttypes.OptionalSetDefaultTest
import OptionalBinary = ttypes.OptionalBinary

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Prints 'testString("%s")' with thing as '%s'
   * @param string thing - the string to print
   * @return string - returns the string 'thing'
   */
  secondtestString(thing: string): string;

  /**
   * Prints 'testString("%s")' with thing as '%s'
   * @param string thing - the string to print
   * @return string - returns the string 'thing'
   */
  secondtestString(thing: string, callback?: (error: void, response: string)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_secondtestString(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
