//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var weatherDataRequest = module.exports.weatherDataRequest = function(args) {
  this.city = null;
  this.country = null;
  this.latitude = null;
  this.longitude = null;
  this.pressure = null;
  this.humidity = null;
  this.temp = null;
  this.temp_min = null;
  this.temp_max = null;
  this.windSpeed = null;
  this.windDirection = null;
  this.weatherDescription = null;
  if (args) {
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field city is unset!');
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field country is unset!');
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field latitude is unset!');
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field longitude is unset!');
    }
    if (args.pressure !== undefined && args.pressure !== null) {
      this.pressure = args.pressure;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pressure is unset!');
    }
    if (args.humidity !== undefined && args.humidity !== null) {
      this.humidity = args.humidity;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field humidity is unset!');
    }
    if (args.temp !== undefined && args.temp !== null) {
      this.temp = args.temp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field temp is unset!');
    }
    if (args.temp_min !== undefined && args.temp_min !== null) {
      this.temp_min = args.temp_min;
    }
    if (args.temp_max !== undefined && args.temp_max !== null) {
      this.temp_max = args.temp_max;
    }
    if (args.windSpeed !== undefined && args.windSpeed !== null) {
      this.windSpeed = args.windSpeed;
    }
    if (args.windDirection !== undefined && args.windDirection !== null) {
      this.windDirection = args.windDirection;
    }
    if (args.weatherDescription !== undefined && args.weatherDescription !== null) {
      this.weatherDescription = args.weatherDescription;
    }
  }
};
weatherDataRequest.prototype = {};
weatherDataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.pressure = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.humidity = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.temp = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I16) {
        this.temp_min = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I16) {
        this.temp_max = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.windSpeed = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.windDirection = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.weatherDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

weatherDataRequest.prototype.write = function(output) {
  output.writeStructBegin('weatherDataRequest');
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 1);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.pressure !== null && this.pressure !== undefined) {
    output.writeFieldBegin('pressure', Thrift.Type.I16, 5);
    output.writeI16(this.pressure);
    output.writeFieldEnd();
  }
  if (this.humidity !== null && this.humidity !== undefined) {
    output.writeFieldBegin('humidity', Thrift.Type.I16, 6);
    output.writeI16(this.humidity);
    output.writeFieldEnd();
  }
  if (this.temp !== null && this.temp !== undefined) {
    output.writeFieldBegin('temp', Thrift.Type.I16, 7);
    output.writeI16(this.temp);
    output.writeFieldEnd();
  }
  if (this.temp_min !== null && this.temp_min !== undefined) {
    output.writeFieldBegin('temp_min', Thrift.Type.I16, 8);
    output.writeI16(this.temp_min);
    output.writeFieldEnd();
  }
  if (this.temp_max !== null && this.temp_max !== undefined) {
    output.writeFieldBegin('temp_max', Thrift.Type.I16, 9);
    output.writeI16(this.temp_max);
    output.writeFieldEnd();
  }
  if (this.windSpeed !== null && this.windSpeed !== undefined) {
    output.writeFieldBegin('windSpeed', Thrift.Type.I16, 10);
    output.writeI16(this.windSpeed);
    output.writeFieldEnd();
  }
  if (this.windDirection !== null && this.windDirection !== undefined) {
    output.writeFieldBegin('windDirection', Thrift.Type.STRING, 11);
    output.writeString(this.windDirection);
    output.writeFieldEnd();
  }
  if (this.weatherDescription !== null && this.weatherDescription !== undefined) {
    output.writeFieldBegin('weatherDescription', Thrift.Type.STRING, 12);
    output.writeString(this.weatherDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

